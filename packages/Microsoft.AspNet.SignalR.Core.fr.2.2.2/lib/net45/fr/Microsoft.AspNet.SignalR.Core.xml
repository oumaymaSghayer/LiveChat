<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.AspNet.SignalR.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.AspNet.SignalR.AuthorizeAttribute">
      <summary>S'applique aux concentrateurs et aux méthodes de concentrateur pour autoriser les connexions de clients aux concentrateurs et autoriser les clients à appeler les méthodes de concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.AuthorizeAttribute" />.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.AuthorizeAttribute._requireOutgoing">
      <summary>Indique s'il faut appliquer uniquement l'autorisation aux appels de l'une des méthodes de concentrateur côté client.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubConnection(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>Détermine si un client est autorisé à se connecter à <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>true si l’appelant est autorisé à se connecter au concentrateur ; sinon, false.</returns>
      <param name="hubDescriptor">La description du concentrateur auquel le client tente de se connecter.</param>
      <param name="request">Demande de (re)connexion du client.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubMethodInvocation(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Boolean)">
      <summary>Détermine si le client est autorisé à appeler la méthode <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>true si l'appelant est autorisé à appeler le <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> ; sinon, false.</returns>
      <param name="hubIncomingInvokerContext">
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext" /> fournissant des détails concernant l’appel de la méthode <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</param>
      <param name="appliesToMethod">true pour indiquer que l'instance d'interface est un attribut appliqué directement à une méthode ; sinon, false.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.AuthorizeAttribute.RequireOutgoing">
      <summary>Défini sur false pour appliquer uniquement l'autorisation aux appels de l'une des méthodes de concentrateur côté client.Cette propriété affecte uniquement les attributs appliqués à la classe de concentrateur.Cette propriété ne peut pas être lue.</summary>
      <returns>false pour appliquer uniquement l'autorisation aux appels de l'une des méthodes de concentrateur côté serveur.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.AuthorizeAttribute.Roles">
      <summary>Obtient ou définit les rôles des utilisateurs.</summary>
      <returns>Rôles des utilisateurs.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.UserAuthorized(System.Security.Principal.IPrincipal)">
      <summary>En cas de substitution, fournit un point d'entrée aux contrôles des autorisations personnalisés.Appelée par <see cref="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubConnection(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)" /> et <see cref="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubMethodInvocation(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Boolean)" />.</summary>
      <returns>true si l'utilisateur est autorisé ; sinon, false.</returns>
      <param name="user">
        <see cref="T:System.Security.Principal.IPrincipal" /> pour le client en cours d'autorisation.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.AuthorizeAttribute.Users">
      <summary>Obtient ou définit les utilisateurs autorisés.</summary>
      <returns>Utilisateurs autorisés.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.ConnectionConfiguration">
      <summary>Représente une configuration de connexion.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionConfiguration.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionConfiguration.EnableJSONP">
      <summary>Obtient ou définit un booléen qui détermine si JSONP est activé.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionConfiguration.Resolver">
      <summary>Obtient ou définit le résolveur de dépendance à utiliser pour la connexion du concentrateur.</summary>
      <returns>Résolveur de dépendance à utiliser pour la connexion du concentrateur.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.ConnectionExtensions">
      <summary>Fournit des méthodes d'extension utilisées pour envoyer un message à toutes les connexions qui s'abonnent au signal spécifique.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionExtensions.Broadcast(Microsoft.AspNet.SignalR.IConnection,System.Object,System.String[])">
      <summary>Diffuse une valeur à toutes les connexions, à l'exception des ID de connexion spécifiés.</summary>
      <returns>Tâche représentant la fin de la diffusion.</returns>
      <param name="connection">Connexion.</param>
      <param name="value">Valeur à diffuser.</param>
      <param name="excludeConnectionIds">Liste des ID de connexion à exclure de la diffusion.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionExtensions.Send(Microsoft.AspNet.SignalR.IConnection,System.Collections.Generic.IList{System.String},System.Object)">
      <summary>Envoie un message à l'ensemble des connexions abonnées au signal spécifié.Un identifiant de connexion spécifique est un exemple de signal.</summary>
      <returns>Tâche représentant la fin de la diffusion.</returns>
      <param name="connection">Connexion.</param>
      <param name="connectionIds">Identifiants de connexion vers lesquels effectuer l'envoi.</param>
      <param name="value">Valeur à publier.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionExtensions.Send(Microsoft.AspNet.SignalR.IConnection,System.String,System.Object)">
      <summary>Envoie un message à l'ensemble des connexions abonnées au signal spécifié.Un identifiant de connexion spécifique est un exemple de signal.</summary>
      <returns>Tâche représentant la fin de la diffusion.</returns>
      <param name="connection">Connexion.</param>
      <param name="connectionId">connectionId vers lequel effectuer l'envoi.</param>
      <param name="value">Valeur à publier.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.ConnectionMessage">
      <summary>Message envoyé à une ou plusieurs connexions.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.Collections.Generic.IList{System.String},System.Object)"></member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.Collections.Generic.IList{System.String},System.Object,System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.ConnectionMessage" />.</summary>
      <param name="signal">Signal.</param>
      <param name="value">Charge de travail du message.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.String,System.Object,System.Collections.Generic.IList{System.String})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.ConnectionMessage" />.</summary>
      <param name="signal">Signal.</param>
      <param name="value">Charge de travail du message.</param>
      <param name="excludedSignals">Signaux à exclure.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.ExcludedSignals">
      <summary>Représente une liste des signaux qui doivent être utilisés pour filtrer les connexions qui reçoivent ce message.</summary>
      <returns>Retourne <see cref="T:System.Collections.Generic.IList`1" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.Signal">
      <summary>Signal auquel doit être envoyé ce message.Les connexions abonnées à ce signal recevront la charge de travail du message.</summary>
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.Signals">
      <summary>Liste des signaux auxquels ce message doit être remis.Si ceci est utilisé, le signal ne peut pas être utilisé.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.Value">
      <summary>Charge de travail du message.</summary>
      <returns>Retourne <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Cookie">
      <summary>Représente le cookie de SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Cookie.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Cookie" />.</summary>
      <param name="name">Nom de propriété du cookie.</param>
      <param name="value">Valeur de propriété du cookie.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Cookie.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Cookie" />.</summary>
      <param name="name">Nom de propriété du cookie.</param>
      <param name="value">Valeur de propriété du cookie.</param>
      <param name="domain">Propriété de domaine du cookie.</param>
      <param name="path">Chemin d'accès de propriété du cookie.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Domain">
      <summary>Obtient ou définit le domaine du cookie.</summary>
      <returns>Le domaine du cookie.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Name">
      <summary>Obtient ou définit le nom du cookie.</summary>
      <returns>Nom du cookie.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Path">
      <summary>Obtient ou définit le chemin d'accès du cookie.</summary>
      <returns>Chemin d'accès du cookie.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Value">
      <summary>Obtient ou définit la valeur du cookie.</summary>
      <returns>Valeur du cookie.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver">
      <summary>Représente un résolveur de dépendance avec le comportement par défaut.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Dispose">
      <summary>Libère les ressources utilisées par l'instance actuelle de la classe <see cref="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par l'instance actuelle de la classe <see cref="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">true pour libérer à la fois les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.GetService(System.Type)">
      <summary>Résout des services enregistrés uniques qui prennent en charge la création d'objet arbitraire.</summary>
      <returns>Service ou objet demandé.</returns>
      <param name="serviceType">Type du service ou de l'objet demandé.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.GetServices(System.Type)">
      <summary>Résout plusieurs services enregistrés.</summary>
      <returns>Services demandés.</returns>
      <param name="serviceType">Type des services demandés.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Register(System.Type,System.Collections.Generic.IEnumerable{System.Func{System.Object}})">
      <summary>Inscrit les services spécifiés dans le résolveur de dépendance.</summary>
      <param name="serviceType">Type des services à inscrire.</param>
      <param name="activators">Les services à inscrire dans le résolveur de dépendance.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Register(System.Type,System.Func{System.Object})">
      <summary>Inscrit le service spécifié dans le résolveur de dépendance.</summary>
      <param name="serviceType">Type de service à inscrire.</param>
      <param name="activator">Le service à inscrire dans le résolveur de dépendance.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.Resolve``1(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Résout le type des extensions.</summary>
      <returns>Retourne un objet pour résoudre le type des extensions.</returns>
      <param name="resolver">Programme de résolution des dépendances.</param>
      <typeparam name="T">Type à résoudre.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.Resolve(Microsoft.AspNet.SignalR.IDependencyResolver,System.Type)">
      <summary>Résout le type des extensions.</summary>
      <returns>Retourne un objet pour résoudre le type des extensions.</returns>
      <param name="resolver">Programme de résolution des dépendances.</param>
      <param name="type">Type à résoudre.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.ResolveAll``1(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Résout tous les types des extensions.</summary>
      <returns>Retourne une collection d'extensions dont le type a été résolu.</returns>
      <param name="resolver">Programme de résolution des dépendances.</param>
      <typeparam name="T">Type à résoudre.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.ResolveAll(Microsoft.AspNet.SignalR.IDependencyResolver,System.Type)">
      <summary>Résout tous les types des extensions.</summary>
      <returns>Retourne une collection d'extensions dont le type a été résolu.</returns>
      <param name="resolver">Programme de résolution des dépendances.</param>
      <param name="type">Type à résoudre.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.GlobalHost">
      <summary>Fournit l’accès aux informations d’hôte par défaut.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.Configuration">
      <summary>Obtient le <see cref="T:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager" /> par défaut</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager" /> par défaut.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.ConnectionManager">
      <summary>Obtient le <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager" /> par défaut</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager" /> par défaut.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.DependencyResolver">
      <summary>Obtient ou définit l'instance <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" /> par défaut.</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" /> par défaut.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.HubPipeline">
      <summary>Obtient le <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> par défaut</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> par défaut.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.TraceManager">
      <summary>Obtient le <see cref="T:Microsoft.AspNet.SignalR.Tracing.ITraceManager" /> par défaut</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.GroupManager">
      <summary>Gère les groupes d’une connexion.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.#ctor(Microsoft.AspNet.SignalR.IConnection,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.GroupManager" />.</summary>
      <param name="connection">
        <see cref="T:Microsoft.AspNet.SignalR.IConnection" /> sur laquelle réside ce groupe.</param>
      <param name="groupPrefix">Préfixe pour ce groupe.Soit un nom <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> ou un nom de type <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Add(System.String,System.String)">
      <summary>Ajoute une connexion au groupe spécifié.</summary>
      <returns>Tâche représentant l’identifiant de connexion ajouté au groupe.</returns>
      <param name="connectionId">Identifiant de connexion à ajouter au groupe.</param>
      <param name="groupName">Nom du groupe.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Remove(System.String,System.String)">
      <summary>Supprime une connexion du groupe spécifié.</summary>
      <returns>Tâche représentant l’identifiant de connexion supprimé du groupe.</returns>
      <param name="connectionId">Identifiant de connexion à supprimer du groupe.</param>
      <param name="groupName">Nom du groupe.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Send(System.Collections.Generic.IList{System.String},System.Object,System.String[])">
      <summary>Envoie une valeur au groupe spécifié.</summary>
      <returns>Tâche représentant la fin d’un envoi.</returns>
      <param name="groupNames">Nom des groupes.</param>
      <param name="value">Valeur à envoyer.</param>
      <param name="excludeConnectionIds">Liste des ID de connexion à exclure.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Send(System.String,System.Object,System.String[])">
      <summary>Envoie une valeur au groupe spécifié.</summary>
      <returns>Tâche représentant la fin d’un envoi.</returns>
      <param name="groupName">Nom du groupe.</param>
      <param name="value">Valeur à envoyer.</param>
      <param name="excludeConnectionIds">Liste des ID de connexion à exclure.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hub">
      <summary>Fournit des méthodes qui communiquent avec les connexions SignalR qui se sont connectées à un <see cref="T:Microsoft.AspNet.SignalR.Hub" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hub" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hub.Clients">
      <summary>Obtient ou définit les clients qui communiquent avec les connexions SignalR.</summary>
      <returns>Les clients qui communiquent avec les connexions SignalR.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hub.Context">
      <summary>Obtient ou définit les informations relatives au client appelant.</summary>
      <returns>Les informations sur le client appelant.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.Dispose">
      <summary>Libère toutes les ressources utilisées par cette instance.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.Dispose(System.Boolean)">
      <summary>Libère toutes les ressources utilisées par cette instance.</summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hub.Groups">
      <summary>Obtient ou définit le gestionnaire de groupes pour cette instance de concentrateur.</summary>
      <returns>Gestionnaire de groupes pour cette instance de concentrateur.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.OnConnected">
      <summary>Se produit lorsque la connexion se connecte à cette instance de concentrateur.</summary>
      <returns>Résultat de l'opération.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.OnDisconnected">
      <summary>Se produit lorsqu’une connexion se déconnecte de cette instance de concentrateur.</summary>
      <returns>Résultat de l'opération.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.OnReconnected">
      <summary>Se produit lorsque la connexion se reconnecte à cette instance de concentrateur.</summary>
      <returns>Résultat de l'opération.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.HubConfiguration">
      <summary>Représente une configuration de concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.HubConfiguration.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.HubConfiguration.EnableDetailedErrors">
      <summary>Détermine si les exceptions détaillées levées dans les méthodes de concentrateur sont rapportées au client appelant.Prend la valeur par défaut false.</summary>
      <returns>true si les exceptions détaillées levées dans les méthodes de concentrateur sont rapportées au client appelant ; sinon, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.HubConfiguration.EnableJavaScriptProxies">
      <summary>Détermine si les proxies JavaScript des concentrateurs côté serveur doivent être générés automatiquement à l'emplacement {Chemin d'accès}/concentrateurs.La valeur par défaut est true.</summary>
      <returns>true si les proxies JavaScript des concentrateurs côté serveur doivent être générés automatiquement à l'emplacement {Chemin d'accès}/concentrateurs ; sinon, false.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.HubException"></member>
    <member name="M:Microsoft.AspNet.SignalR.HubException.#ctor"></member>
    <member name="M:Microsoft.AspNet.SignalR.HubException.#ctor(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.HubException.#ctor(System.String,System.Object)"></member>
    <member name="P:Microsoft.AspNet.SignalR.HubException.ErrorData"></member>
    <member name="T:Microsoft.AspNet.SignalR.HubPipelineExtensions">
      <summary>Fournit des méthodes d'extension pour ajouter des fonctionnalités personnalisées aux types de données.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.HubPipelineExtensions.RequireAuthentication(Microsoft.AspNet.SignalR.Hubs.IHubPipeline)">
      <summary>Lorsque l'authentification est exigée, cela ajoute un <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> avec les agents d'autorisation <see cref="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection" /> et <see cref="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation" /> qui seront appliqués globalement à l'ensemble des concentrateurs et méthodes de concentrateur.Ces agents d'autorisation requièrent que l'<see cref="T:System.Security.Principal.IIdentity" /> du <see cref="T:System.Security.Principal.IPrincipal" /> soit authentifiée pour les clients qui appellent des méthodes de concentrateur côté serveur ou reçoivent des appels de méthode de concentrateur côté client.</summary>
      <param name="pipeline">
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> auquel ajouter le <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" />.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IConnection">
      <summary>Canal de communication pour une <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> et ses connexions.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IConnection.DefaultSignal">
      <summary>Signal principal de cette connexion.Il s’agit du SignalR principal d’une <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IConnection.Send(Microsoft.AspNet.SignalR.ConnectionMessage)">
      <summary>Envoie un message aux connexions abonnées au signal.</summary>
      <returns>Tâche renvoyée lorsque le message a été envoyé.</returns>
      <param name="message">Message à envoyer.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IConnectionGroupManager">
      <summary>Gère les groupes d’une connexion et permet d’envoyer des messages au groupe.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IConnectionGroupManager.Send(System.Collections.Generic.IList{System.String},System.Object,System.String[])">
      <summary>Envoie une valeur aux groupes spécifiés.</summary>
      <returns>Tâche représentant la fin d’un envoi.</returns>
      <param name="groupNames">Nom des groupes.</param>
      <param name="value">Valeur à envoyer.</param>
      <param name="excludeConnectionIds">Liste des ID de connexion à exclure.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IConnectionGroupManager.Send(System.String,System.Object,System.String[])">
      <summary>Envoie une valeur au groupe spécifié.</summary>
      <returns>Tâche représentant la fin d’un envoi.</returns>
      <param name="groupName">Nom du groupe.</param>
      <param name="value">Valeur à envoyer.</param>
      <param name="excludeConnectionIds">Liste des identifiants de connexion à exclure.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IDependencyResolver">
      <summary>Fournit une interface qui représente le résolveur de dépendance pour SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.GetService(System.Type)">
      <summary>Renvoie le service pour le type donné.</summary>
      <returns>Le service retourné.</returns>
      <param name="serviceType">Type de service à renvoyer.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.GetServices(System.Type)">
      <summary>Renvoie les services pour le type donné.</summary>
      <returns>Services renvoyés.</returns>
      <param name="serviceType">Type de service à renvoyer.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.Register(System.Type,System.Collections.Generic.IEnumerable{System.Func{System.Object}})">
      <summary>Inscrit une liste de services pour le type spécifié.</summary>
      <param name="serviceType">Type de service à inscrire.</param>
      <param name="activators">Liste de délégués de fonction qui acceptent un paramètre qui représente le service à activer.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.Register(System.Type,System.Func{System.Object})">
      <summary>Inscrit un service pour le type spécifié.</summary>
      <param name="serviceType">Type de service à inscrire.</param>
      <param name="activator">Délégué de fonction qui accepte un paramètre qui représente le service à activer.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IGroupManager">
      <summary>Gère les groupes d’une connexion.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IGroupManager.Add(System.String,System.String)">
      <summary>Ajoute une connexion au groupe spécifié.</summary>
      <returns>Tâche représentant l’identifiant de connexion ajouté au groupe.</returns>
      <param name="connectionId">Identifiant de connexion à ajouter au groupe.</param>
      <param name="groupName">Nom du groupe.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IGroupManager.Remove(System.String,System.String)">
      <summary>Supprime une connexion du groupe spécifié.</summary>
      <returns>Tâche représentant l’identifiant de connexion supprimé du groupe.</returns>
      <param name="connectionId">Identifiant de connexion à supprimer du groupe.</param>
      <param name="groupName">Nom du groupe.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IHubContext">
      <summary>Fournit l’accès aux informations sur une <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IHubContext.Clients">
      <summary>Encapsule toutes les informations à propos d’une connexion SignalR pour un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IHubContext.Groups">
      <summary>Obtient le <see cref="T:Microsoft.AspNet.SignalR.IGroupManager" /> pour le concentrateur.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.IGroupManager" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext">
      <summary>Fournit l’accès aux informations sur une <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IPersistentConnectionContext.Connection">
      <summary>Obtient la <see cref="T:Microsoft.AspNet.SignalR.IConnection" /> pour la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IPersistentConnectionContext.Groups">
      <summary>Obtient la <see cref="T:Microsoft.AspNet.SignalR.IConnectionGroupManager" /> pour la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IRequest">
      <summary>Représente une requête SignalR.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Cookies">
      <summary>Obtient les cookies de la connexion client.</summary>
      <returns>Les cookies de la connexion client.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Environment">
      <summary>Obtient l'environnement owin.</summary>
      <returns>L'environnement owin.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Headers">
      <summary>Obtient ou définit les en-têtes de la requête.</summary>
      <returns>En-têtes des requêtes.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.LocalPath">
      <summary>Obtient la partie du chemin d'accès local de l'URL.</summary>
      <returns>Partie du chemin d'accès local de l'URL.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.QueryString">
      <summary>Obtient la collection des variables de chaîne de la requête IRequest.</summary>
      <returns>La collection des variables de chaîne de la requête IRequest.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IRequest.ReadForm">
      <summary>Lit le formulaire de la requête HTTP.</summary>
      <returns>Le formulaire de la requête HTTP à lire.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Url">
      <summary>Obtient l'URI pour IRequest.</summary>
      <returns>L'URI pour IRequest.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.User">
      <summary>Obtient le principal utilisateur pour IRequest.</summary>
      <returns>Le principal utilisateur pour IRequest.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IUserIdProvider"></member>
    <member name="M:Microsoft.AspNet.SignalR.IUserIdProvider.GetUserId(Microsoft.AspNet.SignalR.IRequest)"></member>
    <member name="T:Microsoft.AspNet.SignalR.PersistentConnection">
      <summary> Représente une connexion entre un client et serveur. </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.AckHandler">
      <summary>Obtient ou définit le gestionnaire Ack de cette connexion.</summary>
      <returns>Le gestionnaire Ack de cette connexion.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.Authorize(Microsoft.AspNet.SignalR.IRequest)">
      <summary>Détermine si cette connexion est autorisée.</summary>
      <returns>true si la connexion est autorisée ; sinon, false.</returns>
      <param name="request">Demande.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.AuthorizeRequest(Microsoft.AspNet.SignalR.IRequest)">
      <summary>Détermine si la requête de connexion est autorisée.</summary>
      <returns>true si la requête de connexion est autorisée ; sinon, false.</returns>
      <param name="request">Demande.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Connection">
      <summary>Obtient ou définit la connexion.</summary>
      <returns>Connexion.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Counters">
      <summary>Obtient ou définit le gestionnaire du compteur de performances.</summary>
      <returns>Le gestionnaire du compteur de performances.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.GetSignals(System.String,System.String)">
      <summary>Renvoie les signaux utilisés dans la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
      <returns>Signaux utilisés pour cette <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</returns>
      <param name="userId">Identifiant utilisateur de la connexion actuelle.</param>
      <param name="connectionId">Identifiant de la connexion entrante.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Groups">
      <summary>Obtient ou définit les groupes de connexion.</summary>
      <returns>Groupes de connexion.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.Initialize(Microsoft.AspNet.SignalR.IDependencyResolver)"></member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.JsonSerializer">
      <summary>Obtient ou définit le sérialiseur JSON.</summary>
      <returns>Le sérialiseur JSON.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.MessageBus">
      <summary>Obtient ou définit le bus de messages pour la connexion.</summary>
      <returns>Le bus de messages pour la connexion.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnConnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>Appelée lorsqu’une connexion est effectuée.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> qui se termine lorsque l’opération de connexion est terminée.</returns>
      <param name="request">La demande pour la connexion actuelle.</param>
      <param name="connectionId">ID du client se reconnectant.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnDisconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>Appelée lorsqu’une connexion se déconnecte.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> qui se termine lorsque l’opération de déconnexion est terminée.</returns>
      <param name="request">La demande pour la connexion actuelle.</param>
      <param name="connectionId">ID du client déconnecté.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnReceived(Microsoft.AspNet.SignalR.IRequest,System.String,System.String)">
      <summary>Appelée lorsque des données sont reçues d’une connexion.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> qui se termine lorsque l’opération de réception est terminée.</returns>
      <param name="request">La demande pour la connexion actuelle.</param>
      <param name="connectionId">ID de la connexion envoyant les données.</param>
      <param name="data">Charge de travail envoyée à la connexion.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnReconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>Appelée lorsqu’une connexion se reconnecte après un délai d’attente.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> qui se termine lorsque l’opération de reconnexion est terminée.</returns>
      <param name="request">La demande pour la connexion actuelle.</param>
      <param name="connectionId">ID du client se reconnectant.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnRejoiningGroups(Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.String)">
      <summary>Appelée lorsqu’une connexion se reconnecte après un délai d’attente pour déterminer quels groupes doivent être rejoints.</summary>
      <returns>Collection de noms de groupes qui doivent être rejoints à la reconnexion.</returns>
      <param name="request">La demande pour la connexion actuelle.</param>
      <param name="groups">Groupes auxquels la connexion appelante déclare appartenir.</param>
      <param name="connectionId">ID du client se reconnectant.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.ProcessRequest(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>Gère toutes les requêtes pour une <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> qui se termine lorsque le pipeline <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> est complet.</returns>
      <param name="context">
        <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> de la requête actuelle.</param>
      <exception cref="InvalidOperationException">Levée si la connexion n’a pas été initialisée.Levée si le transport n’a pas été spécifié.Levée si l'ID de connexion n'a pas été spécifié.</exception>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.ProcessRequest(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Point d'entrée OWIN.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.ProtectedData">
      <summary>Obtient ou définit les données protégées de cette connexion.</summary>
      <returns>Le données protégées de cette connexion.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Trace">
      <summary>Obtient ou définit la source de la connexion.</summary>
      <returns>Source de la connexion.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.TraceManager">
      <summary>Obtient ou définit le gestionnaire de traces.</summary>
      <returns>Gestionnaire de traces.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Transport">
      <summary>Obtient ou définit le transport associé à cette connexion.</summary>
      <returns>Le transport associé à cette connexion.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.UserIdProvider"></member>
    <member name="T:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager">
      <summary>Fournit l'accès au gestionnaire de configuration par défaut du serveur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.ConnectionTimeout">
      <summary>Obtient ou définit un TimeSpan représentant la durée pendant laquelle une connexion reste ouverte avant d’expirer.</summary>
      <returns>TimeSpan représentant la durée pendant laquelle une connexion reste ouverte avant d’expirer.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.DefaultMessageBufferSize">
      <summary>Obtient ou définit le nombre de messages à mettre en mémoire tampon pour un signal spécifique.</summary>
      <returns>Le nombre de messages à mettre en mémoire tampon pour un signal spécifique.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.DisconnectTimeout">
      <summary>Obtient ou définit un TimeSpan représentant le délai d’attente après la fin d’une connexion avant le déclenchement de l’événement de déconnexion.</summary>
      <returns>TimeSpan représentant le délai d’attente après la fin d’une connexion avant le déclenchement de l’événement de déconnexion.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.KeepAlive">
      <summary>Obtient ou définit un TimeSpan représentant le délai d'attente entre l'envoi des messages Conserver Actif.Si activé, cette valeur doit être d'au moins deux secondes.Définir sur la valeur Null pour désactiver.</summary>
      <returns>TimeSpan représentant le délai d'attente entre l'envoi des messages Conserver Actif.Si activé, cette valeur doit être d'au moins deux secondes.Définir sur la valeur Null pour désactiver.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.LongPollDelay"></member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.TransportConnectTimeout"></member>
    <member name="T:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager">
      <summary>Fournit l’accès à la configuration du serveur.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.ConnectionTimeout">
      <summary>Obtient ou définit un <see cref="T:System.TimeSpan" /> représentant la durée pendant laquelle une connexion reste ouverte avant d’expirer.</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> représentant la durée pendant laquelle une connexion reste ouverte avant d'expirer.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.DefaultMessageBufferSize">
      <summary>Obtient ou définit le nombre de messages à mettre en mémoire tampon pour un signal spécifique.</summary>
      <returns>Le nombre de messages à mettre en mémoire tampon pour un signal spécifique.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.DisconnectTimeout">
      <summary>Obtient ou définit un <see cref="T:System.TimeSpan" /> représentant le délai d’attente après la fin d’une connexion avant le déclenchement de l’événement de déconnexion.</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> représentant le délai d'attente après la fin d'une connexion avant le déclenchement de l'événement de déconnexion.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.KeepAlive">
      <summary>Obtient ou définit un <see cref="T:System.TimeSpan" /> représentant le délai d'attente entre l'envoi des messages Conserver Actif.Si activé, cette valeur doit être d'au moins deux secondes.Définir sur la valeur Null pour désactiver.</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> représentant le délai d'attente entre l'envoi des messages Conserver Actif.Si activé, cette valeur doit être d'au moins deux secondes.Définir sur la valeur Null pour désactiver.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.LongPollDelay">
      <summary>Obtient ou définit un <see cref="T:System.TimeSpan" /> représentant le délai pendant lequel un client doit attendre avant de rétablir une connexion d'interrogation longue une fois les données envoyées à partir du serveur.La valeur par défaut est 0.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.TransportConnectTimeout">
      <summary>Obtient ou définit un <see cref="T:System.TimeSpan" /> représentant la durée pendant laquelle un client doit être autorisé à se connecter avant de revenir à un autre transport ou d'échouer.La valeur par défaut est 5 secondes.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.HostContext">
      <summary>Représente le contexte de l'hôte SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.HostContext.#ctor(Microsoft.AspNet.SignalR.IRequest,Microsoft.AspNet.SignalR.Hosting.IResponse)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.HostContext.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" />.</summary>
      <param name="environment">Environnement de l'hôte SignalR.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.HostContext.Environment">
      <summary>Obtient l'environnement de l'hôte SignalR.</summary>
      <returns>Environnement de l'hôte SignalR.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.HostContext.Request"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.HostContext.Response"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.HostDependencyResolverExtensions">
      <summary>Représente l'hôte pour les extensions de résolution des dépendances.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.HostDependencyResolverExtensions.InitializeHost(Microsoft.AspNet.SignalR.IDependencyResolver,System.String,System.Threading.CancellationToken)">
      <summary>Initialise l'hôte pour les extensions de résolution des dépendances.</summary>
      <param name="resolver">L'IDependencyResolver.</param>
      <param name="instanceName">Nom de l’instance.</param>
      <param name="hostShutdownToken">Le jeton d'arrêt de l'hôte.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.INameValueCollection"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.INameValueCollection.Get(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.INameValueCollection.GetValues(System.String)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.INameValueCollection.Item(System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.IResponse">
      <summary>Représente une connexion au client.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.IResponse.CancellationToken">
      <summary>Obtient un jeton d'annulation représentant la durée de vie du client.</summary>
      <returns>Jeton d'annulation représentant la durée de vie du client.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.IResponse.ContentType">
      <summary>Obtient ou définit le type du contenu de la réponse.</summary>
      <returns>Type de contenu de la réponse.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.IResponse.Flush">
      <summary>Vide la réponse au client mise en mémoire tampon.</summary>
      <returns>Tâche représentant le moment où les données ont été vidées.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.IResponse.Write(System.ArraySegment{System.Byte})">
      <summary>Écrit les données mises en mémoire tampon.</summary>
      <param name="data">Données à écrire dans la mémoire tampon.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory">
      <summary>Responsable de la création des instances <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Crée une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory" />.</summary>
      <param name="resolver">Programme de résolution des dépendances à utiliser lors de la création de la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory.CreateInstance(System.Type)">
      <summary>Crée une instance du type spécifié à l’aide du programme de résolution des dépendances ou du constructeur par défaut de ce type.</summary>
      <returns>Instance d’une <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</returns>
      <param name="connectionType">Type de <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> à créer.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.ResponseExtensions">
      <summary>Méthodes d'extension pour <see cref="T:Microsoft.AspNet.SignalR.Hosting.IResponse" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.ResponseExtensions.End(Microsoft.AspNet.SignalR.Hosting.IResponse,System.String)">
      <summary>Ferme la connexion à un client avec des données facultatives.</summary>
      <returns>Tâche représentant la fermeture de la connexion.</returns>
      <param name="response">
        <see cref="T:Microsoft.AspNet.SignalR.Hosting.IResponse" />.</param>
      <param name="data">Données à écrire dans la connexion.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule">
      <summary>Applique les attributs d'autorisation de la classe <see cref="T:Microsoft.AspNet.SignalR.Hub" /> pour déterminer si les clients sont autorisés à recevoir les messages envoyés à partir du concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.#ctor(Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection,Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" />.</summary>
      <param name="globalConnectionAuthorizer">L'agent d'autorisation de connexion global.</param>
      <param name="globalInvocationAuthorizer">L'agent d'autorisation d'appel global.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.BuildAuthorizeConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Boolean})">
      <summary>Encapsule une fonction à appeler avant qu’un client s’abonne aux signaux appartenant au concentrateur décrit par le <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" />.Par défaut, le <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> recherche des attributs sur le concentrateur pour déterminer si le client est autorisé à s'abonner aux appels de méthode pour le concentrateur décrit.La fonction renvoie la valeur True si le client est autorisé à s’abonné aux appels de méthode de concentrateur côté client ; sinon False.</summary>
      <returns>Fonction encapsulée indiquant si le client est autorisé ou non à se connecter au concentrateur décrit.</returns>
      <param name="authorizeConnect">Fonction indiquant si le client est autorisé ou non à se connecter au concentrateur décrit.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})">
      <summary>Encapsule une fonction qui appelle une méthode de concentrateur côté serveur.Même si un client n’est pas autorisé à se connecter à un concentrateur, il sera autorisé à appeler des méthodes côté serveur sur ce concentrateur sauf si cela est empêché dans <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> en n’exécutant pas le paramètre d’appel.</summary>
      <returns>Fonction encapsulée qui appelle une méthode de concentrateur côté serveur.</returns>
      <param name="invoke">Fonction qui appelle une méthode de concentrateur côté serveur.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation">
      <summary>Décrit un appel de méthode de concentrateur côté client.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.Args">
      <summary>Obtient ou définit la liste des arguments avec lesquels la méthode de concentrateur côté client sera appelée.</summary>
      <returns>La liste d'arguments associée à la méthode de concentrateur côté client.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.Hub">
      <summary>Obtient ou définit le nom du concentrateur auquel la méthode appelée appartient.</summary>
      <returns>Nom du concentrateur auquel la méthode appelée appartient.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.Method">
      <summary>Obtient ou définit le nom de la méthode de concentrateur côté client appelée.</summary>
      <returns>Nom de la méthode de concentrateur côté client appelée.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.State">
      <summary>Obtient ou définit le magasin clé-valeur représentant l’état de concentrateur sur le serveur modifié depuis le dernier envoi de l’état de concentrateur au client.</summary>
      <returns>Un magasin clé-valeur représentant l’état de concentrateur sur le serveur.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ClientProxy">
      <summary>Représente un proxy côté serveur pour le concentrateur côté client.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.Invoke(System.String,System.Object[])">
      <summary>Appelle une méthode sur la ou les connexions représentées par l’instance <see cref="T:Microsoft.AspNet.SignalR.Hubs.ClientProxy" />.</summary>
      <returns>Tâche représentant le moment où les données ont été envoyées au client.</returns>
      <param name="method">Nom de la méthode à appeler.</param>
      <param name="args">Arguments à transmettre au client.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>Exécute la méthode <see cref="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.Invoke(System.String,System.Object[])" />.</summary>
      <returns>La valeur est systématiquement true.</returns>
      <param name="binder">Informations contenant la sémantique de liaison et les détails de l'opération de concentrateur côté client.</param>
      <param name="args">Arguments transmis au membre objet lors de l'opération d'appel.</param>
      <param name="result">Lorsque la méthode est retournée, contient le résultat de l'appel de membre.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ConnectionIdProxy">
      <summary>Représente un proxy d'ID de connexion pour le concentrateur côté client.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ConnectionIdProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.String[])"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator">
      <summary>Représente le localisateur d'assembly par défaut.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator.GetAssemblies">
      <summary>Obtient les assemblys qui ont été chargés dans le domaine d'application actuel.</summary>
      <returns>Ensemble d'assemblys dans le domaine d'application actuel.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator">
      <summary>Représente l'activateur par défaut pour les concentrateurs SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator" />.</summary>
      <param name="resolver">Programme de résolution des dépendances</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator.Create(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>Crée un nouvel activateur de concentrateur.</summary>
      <returns>L'activateur de concentrateur créé.</returns>
      <param name="descriptor">Descripteur.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager">
      <summary>Représente un gestionnaire de concentrateur par défaut.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager" />.</summary>
      <param name="resolver">Résolveur du concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHub(System.String)">
      <summary>Récupère un descripteur de concentrateur unique.</summary>
      <returns>Le descripteur du concentrateur, s'il est trouvé ; sinon, null.</returns>
      <param name="hubName">Nom du concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHubMethod(System.String,System.String,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>Récupère une méthode avec un nom donné sur un concentrateur donné.</summary>
      <returns>Le descripteur de la méthode, s’il est trouvé.Sinon, renvoie la valeur null.</returns>
      <param name="hubName">Nom du concentrateur.</param>
      <param name="method">Nom de la méthode à trouver.</param>
      <param name="parameters">Paramètres de la méthode pour laquelle rechercher une correspondance.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHubMethods(System.String,System.Func{Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Boolean})">
      <summary>Obtient toutes les méthodes disponibles à appeler sur un concentrateur donné.</summary>
      <returns>Liste des méthodes disponibles.</returns>
      <param name="hubName">Nom du concentrateur.</param>
      <param name="predicate">Prédicat facultatif pour filtrer les résultats.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHubs(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.Boolean})">
      <summary>Récupère tous les concentrateurs disponibles correspondant au prédicat donné.</summary>
      <returns>Liste des descripteurs de concentrateur.</returns>
      <param name="predicate">Prédicat.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.ResolveHub(System.String)">
      <summary>Résout un nom de concentrateur donné en un objet concret.</summary>
      <returns>Instance d’implémentation du concentrateur, s’il est trouvé.Sinon, renvoie la valeur null.</returns>
      <param name="hubName">Nom du concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.ResolveHubs">
      <summary>Résout tous les concentrateurs disponibles en leurs objets concrets.</summary>
      <returns>Liste des instances du concentrateur.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator">
      <summary>Représente un générateur pour le proxy Javascript par défaut.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.#ctor(Microsoft.AspNet.SignalR.Hubs.IHubManager,Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator" />.</summary>
      <param name="manager">Gestionnaire du concentrateur.</param>
      <param name="javaScriptMinifier">Minifier le Javascript.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator" />.</summary>
      <param name="resolver">Programme de résolution des dépendances.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.GenerateProxy(System.String)">
      <summary>Génère un proxy spécifié.</summary>
      <returns>Proxy généré.</returns>
      <param name="serviceUrl">URL du service.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.GenerateProxy(System.String,System.Boolean)">
      <summary>Génère un proxy spécifié.</summary>
      <returns>Proxy généré.</returns>
      <param name="serviceUrl">URL du service.</param>
      <param name="includeDocComments">true pour inclure les commentaires Doc ; sinon, false.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver">
      <summary>Représente le résolveur par défaut du paramètre du concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver.ResolveMethodParameters(Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>Résout les valeurs de paramètre de méthode en fonction des objets fournis.</summary>
      <returns>Tableau des valeurs de paramètre.</returns>
      <param name="method">Descripteur de la méthode.</param>
      <param name="values">Liste des valeurs à partir desquelles résoudre les valeurs de paramètre.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver.ResolveParameter(Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor,Microsoft.AspNet.SignalR.Json.IJsonValue)">
      <summary>Résout la valeur de paramètre en fonction de l'objet fourni.</summary>
      <returns>Valeur du paramètre.</returns>
      <param name="descriptor">Descripteur du paramètre.</param>
      <param name="value">Valeur à partir de laquelle résoudre le paramètre.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.Descriptor">
      <summary>Décrit les informations du concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.Descriptor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.Descriptor" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.Descriptor.Name">
      <summary>Obtient ou définit le nom du concentrateur.</summary>
      <returns>Nom du concentrateur.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.Descriptor.NameSpecified">
      <summary>Obtient ou définit une valeur qui indique si le nom d'attribut de concentrateur est spécifié.</summary>
      <returns>true si un nom d'attribut de concentrateur est spécifié ; sinon, false.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary">
      <summary>Contient un objet du dictionnaire devant stocker les paires clé-valeur, et substitut les méthodes TrySetMember et TryGetMember pour prendre en charge la nouvelle syntaxe.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary" />.</summary>
      <param name="obj">L'objet dictionnaire.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Ajoute un objet de paire clé/valeur spécifiée au dictionnaire.</summary>
      <param name="item">L'objet de paire clé/valeur à ajouter.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Add(System.String,System.Object)">
      <summary>Ajoute la clé et la valeur spécifiées au dictionnaire.</summary>
      <param name="key">Clé de l'élément à ajouter.</param>
      <param name="value">Valeur de l'élément à ajouter.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Clear">
      <summary>Supprime toutes les clés et les valeurs du dictionnaire.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Détermine si le dictionnaire contient un élément paire clé/valeur spécifique.</summary>
      <returns>true si le dictionnaire contient un élément avec la valeur spécifiée ; sinon, false.</returns>
      <param name="item">L'élément paire clé/valeur à rechercher dans le dictionnaire.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.ContainsKey(System.String)">
      <summary>Détermine si le dictionnaire contient la clé spécifiée.</summary>
      <returns>true si le dictionnaire contient la clé spécifiée ; sinon, false.</returns>
      <param name="key">Clé à localiser dans le dictionnaire.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copie les éléments de la paire clé/valeur dans un tableau unidimensionnel, en commençant à l'index du tableau spécifié.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir du dictionnaire.</param>
      <param name="arrayIndex">Index de base zéro dans le tableau au niveau duquel commence la copie.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Count">
      <summary>Obtient le nombre d'éléments dans le dictionnaire.</summary>
      <returns>Le nombre d'éléments de la dictionnaire.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein du dictionnaire.</summary>
      <returns>Énumérateur qui itère au sein du dictionnaire.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.IsReadOnly">
      <summary>Obtient si le dictionnaire dynamique est en lecture seule.</summary>
      <returns>true si le dictionnaire dynamique est en lecture seule ; sinon, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Item(System.String)">
      <summary>Obtient ou définit l'élément avec la clé spécifique dans le dictionnaire.</summary>
      <returns>L'élément avec la clé spécifique dans le dictionnaire.</returns>
      <param name="key">Clé de l'élément.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Keys">
      <summary>Obtient une collection de clés contenues dans le dictionnaire.</summary>
      <returns>Collection de clés contenues dans le dictionnaire.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Supprime un élément spécifique de la paire clé/valeur du dictionnaire.</summary>
      <returns>Le dictionnaire avec l'élément supprimé.</returns>
      <param name="item">Élément à supprimer.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Remove(System.String)">
      <summary>Supprime une clé spécifique du dictionnaire.</summary>
      <returns>Le dictionnaire avec la clé supprimée.</returns>
      <param name="key">La clé à supprimer.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d'une collection.</summary>
      <returns>L'énumérateur qui itère au sein d'une collection.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Fournit l'implémentation pour les opérations qui obtiennent des valeurs de membre.</summary>
      <returns>true si l'opération réussit ; sinon, false.</returns>
      <param name="binder">Fournit des informations sur l'objet qui a appelé l'opération dynamique.</param>
      <param name="result">Résultat de l'opération Get.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.TryGetValue(System.String,System.Object@)">
      <summary>Obtient la valeur associée à la clé spécifiée.</summary>
      <returns>true si le dictionnaire contient un élément avec la clé spécifiée ; sinon, false.</returns>
      <param name="key">Clé de la valeur à obtenir.</param>
      <param name="value">Lorsque cette méthode est retournée, contient valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, valeur par défaut pour le type du paramètre de valeur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Fournit l'implémentation pour les opérations qui définissent des valeurs de membre.</summary>
      <returns>true si l'opération réussit ; sinon, false.</returns>
      <param name="binder">Fournit des informations sur l'objet qui a appelé l'opération dynamique.</param>
      <param name="value">Valeur sur laquelle définir le membre.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Unwrap(System.Object)">
      <summary>Désencapsule une valeur spécifiée associée au dictionnaire.</summary>
      <returns>Valeur non encapsulée.</returns>
      <param name="value">Valeur à désencapsuler.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Values">
      <summary>Obtient une collection de valeurs contenues dans le dictionnaire.</summary>
      <returns>Collection de valeurs contenues dans le dictionnaire.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Wrap(System.Object)">
      <summary>Encapsule une valeur spécifiée associée au dictionnaire.</summary>
      <returns>Valeur encapsulée.</returns>
      <param name="value">Valeur à encapsuler.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator">
      <summary>Représente un générateur pour le proxy Javascript vide.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator.GenerateProxy(System.String)">
      <summary>Génère un proxy avec l'URL spécifiée.</summary>
      <returns>Proxy généré.</returns>
      <param name="serviceUrl">URL du service.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator">
      <summary>Représente l'énumérable associé au localisateur d'assembly.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator" />.</summary>
      <param name="assemblies">Les assemblys.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator.GetAssemblies">
      <summary>Retourne la liste des assemblys.</summary>
      <returns>Liste des assemblys.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ExceptionContext"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ExceptionContext.#ctor(System.Exception)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ExceptionContext.Error">
      <summary>Exception à envoyer au client appelant.Ceci est remplacé par une exception générique, sauf si l'erreur est une <see cref="T:Microsoft.AspNet.SignalR.HubException" /> ou que <see cref="P:Microsoft.AspNet.SignalR.HubConfiguration.EnableDetailedErrors" /> est défini sur true.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ExceptionContext.Result">
      <summary>Valeur à renvoyer au lieu de lever une erreur.Dès qu'un résultat est défini, l'erreur est définie sur la valeur null.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.GroupProxy">
      <summary>Représente un groupe de proxys du signal utilisé par le concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.GroupProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext">
      <summary>Représente le contexte appelant du client.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.#ctor(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext" />.</summary>
      <param name="request">Requête HTTP actuelle.</param>
      <param name="connectionId">Identifiant de connexion.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.ConnectionId">
      <summary>Obtient l'ID de connexion du client appelant.</summary>
      <returns>ID de connexion du client appelant.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.Headers">
      <summary>Obtient les en-têtes de la requête.</summary>
      <returns>En-têtes de la requête.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.QueryString">
      <summary>Obtient la chaîne de requête de la requête.</summary>
      <returns>Chaîne de requête de la requête.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.Request">
      <summary>Obtient la <see cref="T:Microsoft.AspNet.SignalR.IRequest" /> pour la requête HTTP en cours.</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.IRequest" /> pour la requête HTTP en cours.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.RequestCookies">
      <summary>Obtient les cookies de la requête.</summary>
      <returns>Cookies de la requête.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.User">
      <summary>Obtient le <see cref="T:System.Security.Principal.IPrincipal" /> de la requête.</summary>
      <returns>
        <see cref="T:System.Security.Principal.IPrincipal" /> de la requête.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext">
      <summary>Encapsule toutes les informations à propos d’une connexion SignalR individuelle pour un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.#ctor(Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,Microsoft.AspNet.SignalR.IConnection,System.String,System.String,Microsoft.AspNet.SignalR.Hubs.StateChangeTracker)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext" />.</summary>
      <param name="pipelineInvoker">Demandeur de pipeline.</param>
      <param name="connection">La connexion d'interface.</param>
      <param name="hubName">Nom du concentrateur.</param>
      <param name="connectionId">ID de connexion.</param>
      <param name="tracker">Le suivi de changement d'état.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.Caller">
      <summary>Obtient ou définit le client appelant.</summary>
      <returns>Le client appelant.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.Others">
      <summary>Obtient ou définit tous les clients connectés sauf le client appelant.</summary>
      <returns>Tous les clients connectés à l’exception du client appelant.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.OthersInGroup(System.String)">
      <summary>Renvoie une représentation dynamique de tous les clients dans un groupe à l’exception du client appelant.</summary>
      <returns>Représentation dynamique de tous les clients dans un groupe à l’exception du client appelant.</returns>
      <param name="groupName">Nom du groupe.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.OthersInGroups(System.Collections.Generic.IList{System.String})">
      <summary>Renvoie une représentation dynamique de tous les clients des groupes spécifiés à l'exception du client appelant.</summary>
      <returns>Représentation dynamique de tous les clients dans un groupe à l’exception du client appelant.</returns>
      <param name="groupNames">Nom des groupes</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.#ctor"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.All"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.AllExcept(System.String[])">
      <summary>Renvoie une représentation dynamique de tous les clients sauf des clients appelants spécifiés.</summary>
      <returns>Représentation dynamique de tous les clients sauf des clients appelants spécifiés.</returns>
      <param name="excludeConnectionIds">Liste des ID de connexion à exclure.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Client(System.String)">
      <summary>Renvoie une représentation dynamique de la connexion avec le ConnectionID spécifié.</summary>
      <returns>Représentation dynamique du client spécifié.</returns>
      <param name="connectionId">Identifiant de connexion</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Clients(System.Collections.Generic.IList{System.String})">
      <summary>Renvoie une représentation dynamique des connexions avec les ConnectionID spécifiés.</summary>
      <returns>Représentation dynamique des clients spécifiés.</returns>
      <param name="connectionIds">Identifiants de connexion.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Connection"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Group(System.String,System.String[])">
      <summary>Renvoie une représentation dynamique du groupe spécifié.</summary>
      <returns>Représentation dynamique du groupe spécifié.</returns>
      <param name="groupName">Nom du groupe.</param>
      <param name="excludeConnectionIds">Liste des ID de connexion à exclure.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Groups(System.Collections.Generic.IList{System.String},System.String[])">
      <summary>Renvoie une représentation dynamique des groupes spécifiés.</summary>
      <returns>Représentation dynamique des groupes spécifiés.</returns>
      <param name="groupNames">Nom des groupes.</param>
      <param name="excludeConnectionIds">Liste des ID de connexion à exclure.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.HubName"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Invoker"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.User(System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor">
      <summary>Représente des informations sur une méthode unique.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDescriptor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDescriptor.CreateQualifiedName(System.String)">
      <summary>Crée un nom qualifié pour le concentrateur utilisant le nom non qualifié spécifié.</summary>
      <returns>Le nom qualifié créé.</returns>
      <param name="unqualifiedName">Nom non qualifié.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubDescriptor.HubType">
      <summary>Obtient ou définit le type de concentrateur.</summary>
      <returns>Type de concentrateur.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher">
      <summary>Gère toutes les communications sur la connexion persistante des concentrateurs.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.#ctor(Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" />.</summary>
      <param name="configuration">Paramètres de configuration déterminant s'il faut activer les proxys JS et fournir les erreurs de concentrateur aux clients.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.AuthorizeRequest(Microsoft.AspNet.SignalR.IRequest)">
      <summary>Crée une liste des concentrateurs autorisés pour la demande spécifiée pour la connexion.</summary>
      <returns>true si certains concentrateurs sont autorisés ; sinon, false.</returns>
      <param name="request">La demande pour la connexion actuelle.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.GetSignals(System.String,System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.Initialize(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Appelé par l'hôte pour initialiser la répartition concentrateur pour IDependencyResolver.</summary>
      <param name="resolver">Résolveur IDependency.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnConnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>Appelée lorsque la connexion se connecte à cette instance de concentrateur.</summary>
      <returns>Tâche appelée lorsque la connexion se connecte à cette instance de concentrateur.</returns>
      <param name="request">La IRequest pour la connexion actuelle.</param>
      <param name="connectionId">ID du client se reconnectant.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnDisconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>Appelée lorsqu’une connexion se déconnecte de cette instance de concentrateur.</summary>
      <returns>Tâche appelée lorsqu'une connexion se déconnecte de cette instance de concentrateur.</returns>
      <param name="request">La IRequest pour la connexion actuelle.</param>
      <param name="connectionId">ID du client se reconnectant.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnReceived(Microsoft.AspNet.SignalR.IRequest,System.String,System.String)">
      <summary>Traite les appels de méthode entrants du concentrateur.</summary>
      <returns>Tâche appelée quand les données sont reçues de cette instance de concentrateur.</returns>
      <param name="request">La IRequest pour la connexion actuelle.</param>
      <param name="connectionId">ID du client se reconnectant.</param>
      <param name="data">Les données reçues.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnReconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>Appelée lorsque la connexion se reconnecte à cette instance de concentrateur.</summary>
      <returns>Tâche appelée lorsque la connexion se reconnecte à cette instance de concentrateur.</returns>
      <param name="request">La IRequest pour la connexion actuelle.</param>
      <param name="connectionId">ID du client se reconnectant.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnRejoiningGroups(Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.String)">
      <summary>Appelée lorsqu’une connexion se reconnecte après un délai d’attente pour déterminer quels groupes doivent être rejoints.</summary>
      <returns>Liste de connexions qui se reconnectent après un délai d’attente pour déterminer quels groupes doivent être rejoints.</returns>
      <param name="request">La IRequest pour la connexion actuelle.</param>
      <param name="groups">Groupes auxquels la connexion appelante déclare appartenir.</param>
      <param name="connectionId">ID du client se reconnectant.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.ProcessRequest(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>Gère toutes les demandes pour le HostContext.</summary>
      <returns>Tâche qui gère toutes les demandes pour le HostContext.</returns>
      <param name="context">Contexte de l'hôte.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.Trace">
      <summary>Obtient les connexions de concentrateur qui permettent aux applications de suivre l'exécution du code et d'associer des messages de suivi avec leurs sources.</summary>
      <returns>Les connexions de concentrateur qui permettent aux applications de suivre l'exécution du code et d'associer des messages de suivi avec leurs sources.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions">
      <summary>Fournit une extension de gestionnaire de concentrateurs à l'ensemble du process du concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions.EnsureHub(Microsoft.AspNet.SignalR.Hubs.IHubManager,System.String,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter[])">
      <summary>Assure toutes les informations concernant le descripteur du concentrateur.</summary>
      <returns>Le descripteur du concentrateur pour assurer toutes les informations.</returns>
      <param name="hubManager">Gestionnaire du concentrateur.</param>
      <param name="hubName">Nom du concentrateur.</param>
      <param name="counters">Compteurs de performances.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions.GetHubMethods(Microsoft.AspNet.SignalR.Hubs.IHubManager,System.String)">
      <summary>Obtient toutes les méthodes disponibles à appeler sur un concentrateur donné.</summary>
      <returns>La collection de méthodes pour appeler sur un concentrateur donné.</returns>
      <param name="hubManager">Gestionnaire du concentrateur.</param>
      <param name="hubName">Nom du concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions.GetHubs(Microsoft.AspNet.SignalR.Hubs.IHubManager)">
      <summary>Récupère tous les concentrateurs disponibles.</summary>
      <returns>L'extraction de tous les concentrateurs disponibles.</returns>
      <param name="hubManager">Gestionnaire du concentrateur.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute">
      <summary>Représente les attributs du nom de la méthode pour le concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute" />.</summary>
      <param name="methodName">Nom de la méthode.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute.MethodName">
      <summary>Obtient ou définit le nom de la méthode.</summary>
      <returns>Le nom de la méthode.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute">
      <summary>Représente l'attribut du nom du concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute" />.</summary>
      <param name="hubName">Nom du concentrateur.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute.HubName">
      <summary>Obtient ou définit le nom du concentrateur.</summary>
      <returns>Nom du concentrateur.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule">
      <summary>Classe de base courante pour simplifier l’implémentation des IHubPipelineModules.Module pouvant intercepter et personnaliser divers stades du traitement de concentrateur, comme la connexion, la reconnexion, la déconnexion, l’appel de méthodes de concentrateur côté serveur, l’appel de méthodes de concentrateur côté client, l’autorisation de clients de concentrateur et la réintégration des groupes de concentrateurs.Un module peut être activé en appelant <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)" />.Les modules combinés ajoutés au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> sont invoqués via l’interface <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildAuthorizeConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Boolean})">
      <summary>Encapsule une fonction à appeler avant qu’un client s’abonne aux signaux appartenant au concentrateur décrit par le <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" />.Par défaut, le <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> recherchera des attributs sur le <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> pour déterminer si le client est autorisé à s’abonner aux appels de méthode pour le concentrateur décrit.La fonction renvoie la valeur True si le client est autorisé à s’abonné aux appels de méthode de concentrateur côté client ; sinon False.</summary>
      <returns>Fonction encapsulée indiquant si le client est autorisé ou non à se connecter au concentrateur décrit.</returns>
      <param name="authorizeConnect">Fonction indiquant si le client est autorisé ou non à se connecter au concentrateur décrit.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>Encapsule une fonction appelée lorsqu’un client se connecte au <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> pour chaque <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> auquel se connecte le client.Par défaut, cela engendre l’appel de la méthode OnConnected du <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Fonction encapsulée à appeler lorsqu’un client se connecte à un concentrateur.</returns>
      <param name="connect">Fonction à appeler lorsqu’un client se connecte à un concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildDisconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>Encapsule une fonction qui est appelée lorsqu’un client se déconnecte du <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> pour chaque <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> auquel le client était connecté.Par défaut, cela engendre l’appel de la méthode OnDisconnected du <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Fonction encapsulée à appeler lorsqu’un client se déconnecte d’un concentrateur.</returns>
      <param name="disconnect">Fonction à appeler lorsqu’un client se déconnecte d’un concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})">
      <summary>Encapsule une fonction qui appelle une méthode de concentrateur côté serveur.Même si un client n’est pas autorisé à se connecter à un concentrateur, il sera autorisé à appeler des méthodes côté serveur sur ce concentrateur sauf si cela est empêché dans <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> en n’exécutant pas le paramètre d’appel.</summary>
      <returns>Fonction encapsulée qui appelle une méthode de concentrateur côté serveur.</returns>
      <param name="invoke">Fonction qui appelle une méthode de concentrateur côté serveur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildOutgoing(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext,System.Threading.Tasks.Task})">
      <summary>Encapsule une fonction qui appelle une méthode de concentrateur côté client.</summary>
      <returns>Fonction encapsulée qui appelle une méthode de concentrateur côté client.</returns>
      <param name="send">Fonction qui appelle une méthode de concentrateur côté client.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildReconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>Encapsule une fonction qui est appelée lorsqu’un client se reconnecte au <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> pour chaque <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> auquel se connecte le client.Par défaut, cela engendre l’appel de la méthode OnReconnected du <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Fonction encapsulée à appeler lorsqu’un client se reconnecte à un concentrateur.</returns>
      <param name="reconnect">Fonction à appeler lorsqu’un client se reconnecte à un concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildRejoiningGroups(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String}})">
      <summary>Encapsule une fonction qui détermine les groupes appartenant au concentrateur décrit par le <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> que le client doit être autorisé à rejoindre.Par défaut, les clients qui se reconnectent au serveur seront supprimés de tous les groupes dont ils peuvent avoir été membres précédemment, car les clients non approuvés peuvent déclarer être membres de groupes qu’ils n’ont jamais été autorisés à rejoindre.</summary>
      <returns>Fonction encapsulée déterminant les groupes que le client doit être autorisé à rejoindre.</returns>
      <param name="rejoiningGroups">Fonction déterminant les groupes que le client doit être autorisé à rejoindre.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterConnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Cette méthode est appelée après l’exécution des composants de connexion de tous les modules ajoutés plus tard au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> et de la méthode <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected" />, si possible.</summary>
      <param name="hub">Concentrateur auquel le client est connecté.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterDisconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Cette méthode est appelée après l’exécution des composants de déconnexion de tous les modules ajoutés plus tard au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> et de la méthode <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected" />, si possible.</summary>
      <param name="hub">Concentrateur duquel le client s’est déconnecté.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterIncoming(System.Object,Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>Cette méthode est appelée après l’exécution des composants entrants de tous les modules ajoutés plus tard au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> et de la méthode de concentrateur côté serveur.</summary>
      <returns>Valeur de retour possiblement nouvelle ou mise à jour de la méthode de concentrateur côté serveur</returns>
      <param name="result">Valeur de retour de la méthode de concentrateur côté serveur</param>
      <param name="context">Description de l’appel de méthode de concentrateur côté serveur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterOutgoing(Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext)">
      <summary>Cette méthode est appelée après l’exécution des composants sortants de tous les modules ajoutés plus tard au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Cela ne signifie pas que tous les clients ont reçu l’appel de la méthode du concentrateur, mais indique qu’un message d’appel de concentrateur a été publié avec succès dans le bus de messages.</summary>
      <param name="context">Description de l’appel de méthode de concentrateur côté client.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterReconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Cette méthode est appelée après l’exécution des composants de reconnexion de tous les modules ajoutés plus tard au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> et de la méthode <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected" />, si possible.</summary>
      <param name="hub">Concentrateur auquel le client s’est reconnecté.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeAuthorizeConnect(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>Cette méthode est appelée après l’exécution des composants AuthorizeConnect de tous les modules ajoutés plus tard au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Si la valeur renvoyée est False, alors ces modules ajoutés plus tard ne seront pas exécutés et le client ne sera pas autorisé à s’abonner aux appels côté client des méthodes appartenant au concentrateur défini par le <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" />.</summary>
      <returns>true si le client est autorisé à se connecter au concentrateur ; sinon, false.</returns>
      <param name="hubDescriptor">Description du concentrateur auquel le client tente de s’abonner.</param>
      <param name="request">Demande de connexion du client tentant de s’abonner au concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeConnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Cette méthode est appelée après l’exécution des composants de connexion de tous les modules ajoutés plus tard au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Si la valeur renvoyée est False, alors ces modules ajoutés plus tard et la méthode <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected" /> ne seront pas exécutés.</summary>
      <returns>true, si les composants de connexion des modules ajoutés plus tard et la méthode <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected" /> doivent être exécutés ; sinon, false.</returns>
      <param name="hub">Concentrateur auquel le client est connecté.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeDisconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Cette méthode est appelée après l’exécution des composants de déconnexion de tous les modules ajoutés plus tard au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Si la valeur renvoyée est False, alors ces modules ajoutés plus tard et la méthode <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected" /> ne seront pas exécutés.</summary>
      <returns>true, si les composants de déconnexion des modules ajoutés plus tard et la méthode <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected" /> doivent être exécutés ; sinon, false.</returns>
      <param name="hub">Concentrateur duquel le client s’est déconnecté.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeIncoming(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>Cette méthode est appelée après l’exécution des composants entrants de tous les modules ajoutés plus tard au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Si la valeur renvoyée est False, alors ces modules ajoutés plus tard et l’appel de la méthode de concentrateur côté serveur ne seront pas exécutés.Même si un client n’est pas autorisé à se connecter à un concentrateur, il sera autorisé à appeler des méthodes côté serveur sur ce concentrateur sauf si cela est empêché dans <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> en n’exécutant pas le paramètre d’appel ou empêché dans <see cref="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeIncoming(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)" /> en renvoyant la valeur False.</summary>
      <returns>true, si les composants entrants des modules ajoutés plus tard et l'appel de la méthode de concentrateur côté serveur doivent être exécutés ; sinon, false.</returns>
      <param name="context">Description de l’appel de méthode de concentrateur côté serveur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeOutgoing(Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext)">
      <summary>Cette méthode est appelée après l’exécution des composants sortants de tous les modules ajoutés plus tard au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Si la valeur renvoyée est False, alors ces modules ajoutés plus tard et la ou les appel(s) de la méthode de concentrateur côté client ne seront pas exécutés.</summary>
      <returns>true, si les composants sortants des modules ajoutés plus tard et l'appel de la méthode de concentrateur côté client doivent être exécutés ; sinon, false.</returns>
      <param name="context">Description de l’appel de méthode de concentrateur côté client.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeReconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Cette méthode est appelée après l’exécution des composants de reconnexion de tous les modules ajoutés plus tard au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Si la valeur renvoyée est False, alors ces modules ajoutés plus tard et la méthode <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected" /> ne seront pas exécutés.</summary>
      <returns>true, si les composants de reconnexion des modules ajoutés plus tard et la méthode <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected" /> doivent être exécutés ; sinon, false.</returns>
      <param name="hub">Concentrateur auquel le client s’est reconnecté.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnIncomingError(Microsoft.AspNet.SignalR.Hubs.ExceptionContext,Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>Appelé lorsqu’une exception non intercepté est levée par une méthode de concentrateur côté serveur ou du composant entrant d’un module ajouté plus tard au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Le fait d’observer l’exception à l’aide de cette méthode ne l’empêchera pas de se propager à d’autres modules.</summary>
      <param name="exceptionContext">Représente l'exception levée durant l'appel côté serveur.Il est possible de modifier l'erreur ou de définir un résultat à l'aide de ce contexte.</param>
      <param name="invokerContext">Description de l’appel de méthode de concentrateur côté serveur.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubRequest">
      <summary>Fournit des méthodes qui communiquent avec la demande de connexion SignalR qui s'est connectée à un concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubRequest.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubRequest" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.Hub">
      <summary>Obtient ou définit la valeur de connexion d'un concentrateur.</summary>
      <returns>La valeur de connexion d'un concentrateur.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.Id">
      <summary>Obtient ou définit l'id de connexion.</summary>
      <returns>ID de connexion.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.Method">
      <summary>Obtient ou définit la méthode de la demande.</summary>
      <returns>Méthode de demande.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.ParameterValues">
      <summary>Obtient ou définit les valeurs du paramètre.</summary>
      <returns>Les valeurs des paramètres.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.State">
      <summary>Obtient ou définit l'état actuel de la demande.</summary>
      <returns>État actuelle de la demande.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubResponse">
      <summary>Représente la réponse renvoyée depuis une requête de concentrateur entrante.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubResponse.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubResponse" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.Error">
      <summary>Obtient ou définit l'exception qui se produit comme résultat de l’appel de la méthode du concentrateur.</summary>
      <returns>Exception qui se produit comme résultat de l’appel de la méthode du concentrateur.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.ErrorData">
      <summary>Données supplémentaires sur l'erreur contenues dans <see cref="T:Microsoft.AspNet.SignalR.HubException" /></summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.Id">
      <summary>Obtient ou définit l'ID de l'opération.</summary>
      <returns>ID de l’opération.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.IsHubException">
      <summary>Indique si l'erreur correspond à une <see cref="T:Microsoft.AspNet.SignalR.HubException" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.Result">
      <summary>Obtient ou définit le résultat de l'appel.</summary>
      <returns>Résultat de l’appel.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.StackTrace">
      <summary>Obtient ou définit le suivi de pile de l’exception qui se produit comme résultat de l’appel de la méthode du concentrateur.</summary>
      <returns>Suivi de pile de l’exception qui se produit comme résultat de l’appel de la méthode du concentrateur.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.State">
      <summary>Obtient ou définit les modifications apportées à l’état aller-retour.</summary>
      <returns>Modifications apportées à l'état aller-retour.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IAssemblyLocator">
      <summary>Localise un assembly et retourne des informations sur ses modules.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IAssemblyLocator.GetAssemblies">
      <summary>Retourne une liste d'assemblys qui sont référencés par le module.</summary>
      <returns>Liste d'assemblys qui sont référencés par le module.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection">
      <summary>Interface à implémenter par l’<see cref="T:System.Attribute" /> qui peut autoriser le client à se connecter à un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection.AuthorizeHubConnection(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>Un <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext" /> donné détermine si le client est autorisé à se connecter au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>La valeur est True si l’appelant est autorisé à se connecter au concentrateur ; sinon False.</returns>
      <param name="hubDescriptor">Description du concentrateur auquel le client tente de se connecter.</param>
      <param name="request">Demande de connexion du client.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation">
      <summary>Interface à implémenter par <see cref="T:System.Attribute" /> qui peut autoriser l’appel des méthodes <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation.AuthorizeHubMethodInvocation(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Boolean)">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext" /> donné, qui détermine si le client est autorisé à appeler la méthode <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>La valeur est True si l’appelant est autorisé à appeler la méthode <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> ; sinon False.</returns>
      <param name="hubIncomingInvokerContext">
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext" /> fournissant des détails concernant l’appel de la méthode <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</param>
      <param name="appliesToMethod">Indique si l'instance d'interface est un attribut appliqué directement à une méthode.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IClientProxy">
      <summary>Proxy côté serveur pour un concentrateur côté client.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IClientProxy.Invoke(System.String,System.Object[])">
      <summary>Appelle une méthode sur la ou les connexions représentées par l’instance <see cref="T:Microsoft.AspNet.SignalR.Hubs.IClientProxy" />.</summary>
      <returns>Tâche représentant le moment où les données ont été envoyées au client.</returns>
      <param name="method">Nom de la méthode à appeler.</param>
      <param name="args">Arguments à transmettre au client</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHub">
      <summary>Fournit une interface qui représente les méthodes qui communiquent avec les connexions SignalR qui se sont connectées à un concentrateur.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHub.Clients">
      <summary>Obtient ou définit les clients connectés au concentrateur.</summary>
      <returns>Les clients connectés au concentrateur.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHub.Context">
      <summary>Obtient ou définit les informations relatives au client appelant.</summary>
      <returns>Les informations sur le client appelant.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHub.Groups">
      <summary>Obtient ou définit le gestionnaire de groupes pour cette instance de concentrateur.</summary>
      <returns>Gestionnaire de groupes pour cette instance de concentrateur.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected">
      <summary>Appelée lorsque la connexion se connecte à cette instance de concentrateur.</summary>
      <returns>Objet tâche qui représente l'opération de connexion.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected">
      <summary>Appelée lorsqu’une connexion se déconnecte de cette instance de concentrateur.</summary>
      <returns>Objet tâche qui représente l'opération de déconnexion.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected">
      <summary>Appelée lorsque la connexion se reconnecte à cette instance de concentrateur.</summary>
      <returns>Objet tâche qui représente l'opération de reconnexion.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubActivator">
      <summary>Fournit la méthode pour créer l'instance de concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubActivator.Create(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>Crée une instance de concentrateur.</summary>
      <returns>Concentrateur nouvellement créé.</returns>
      <param name="descriptor">Le descripteur du concentrateur.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext">
      <summary>Encapsule toutes les informations à propos d’une connexion SignalR individuelle pour un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.Caller"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.Others"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.OthersInGroup(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.OthersInGroups(System.Collections.Generic.IList{System.String})"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext">
      <summary>Encapsule toutes les informations à propos d’une connexion SignalR pour un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.All">
      <summary>Obtient ou définit les clients connectés.</summary>
      <returns>Tous les clients connectés.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.AllExcept(System.String[])">
      <summary>Renvoie une représentation dynamique de tous les clients sauf des clients appelants spécifiés.</summary>
      <returns>Représentation dynamique de tous les clients sauf des clients appelants spécifiés.</returns>
      <param name="excludeConnectionIds">Liste des identifiants de connexion à exclure.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Client(System.String)">
      <summary>Renvoie une représentation dynamique de la connexion avec l'ID de connexion spécifié.</summary>
      <returns>Représentation dynamique du client spécifié.</returns>
      <param name="connectionId">Identifiant de connexion.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Clients(System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Group(System.String,System.String[])">
      <summary>Renvoie une représentation dynamique du groupe spécifié.</summary>
      <returns>Représentation dynamique du groupe spécifié.</returns>
      <param name="groupName">Nom du groupe.</param>
      <param name="excludeConnectionIds">Liste des identifiants de connexion à exclure.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Groups(System.Collections.Generic.IList{System.String},System.String[])"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.User(System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubDescriptorProvider">
      <summary>Décrit le fournisseur de descripteurs de concentrateur, qui fournit des informations sur les concentrateurs disponibles.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubDescriptorProvider.GetHubs">
      <summary>Récupère tous les concentrateurs disponibles.</summary>
      <returns>Collection de descripteurs de concentrateur.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubDescriptorProvider.TryGetHub(System.String,Microsoft.AspNet.SignalR.Hubs.HubDescriptor@)">
      <summary>Tente de récupérer le concentrateur ayant le nom donné.</summary>
      <returns>La valeur est True si le concentrateur a été trouvé.</returns>
      <param name="hubName">Nom du concentrateur.</param>
      <param name="descriptor">Objet de descripteur récupéré.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext">
      <summary>Description d’un appel de méthode de concentrateur côté serveur provenant d’un client.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.Args">
      <summary>Obtient les arguments à transmettre à la méthode appelée.</summary>
      <returns>Arguments à transmettre à la méthode appelée.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.Hub">
      <summary>Obtient une instance de concentrateur qui contient la méthode appelée en tant que membre.</summary>
      <returns>Instance de concentrateur qui contient la méthode appelée en tant que membre.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.MethodDescriptor">
      <summary>Obtient une description de la méthode appelée par le client.</summary>
      <returns>Description de la méthode appelée par le client.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.StateTracker">
      <summary>Obtient un magasin clé-valeur représentant l'état de concentrateur sur le client au moment de l'appel.</summary>
      <returns>Une magasin clé-valeur représentant l’état de concentrateur sur le client au moment de l’appel.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubManager">
      <summary>Décrit un gestionnaire de concentrateurs : le point principal dans l’ensemble du concentrateur et le processus de recherche de méthode.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHub(System.String)">
      <summary>Récupère un descripteur de concentrateur unique.</summary>
      <returns>Le descripteur de concentrateur, s’il est trouvé.Sinon, renvoie la valeur Null.</returns>
      <param name="hubName">Nom du concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHubMethod(System.String,System.String,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>Récupère une méthode avec un nom donné sur un concentrateur donné.</summary>
      <returns>Le descripteur de la méthode, s’il est trouvé.Sinon, renvoie la valeur Null.</returns>
      <param name="hubName">Nom du concentrateur.</param>
      <param name="method">Nom de la méthode à trouver.</param>
      <param name="parameters">Paramètres de la méthode pour laquelle rechercher une correspondance.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHubMethods(System.String,System.Func{Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Boolean})">
      <summary>Obtient toutes les méthodes disponibles à appeler sur un concentrateur donné.</summary>
      <returns>Liste des méthodes disponibles.</returns>
      <param name="hubName">Nom du concentrateur,</param>
      <param name="predicate">Prédicat facultatif pour filtrer les résultats.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHubs(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.Boolean})">
      <summary>Récupère tous les concentrateurs disponibles correspondant au prédicat donné.</summary>
      <returns>Liste des descripteurs de concentrateur.</returns>
      <param name="predicate">Prédicat.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.ResolveHub(System.String)">
      <summary>Résout un nom de concentrateur donné en un objet concret.</summary>
      <returns>Instance d’implémentation du concentrateur, s’il est trouvé.Sinon, renvoie la valeur Null.</returns>
      <param name="hubName">Nom du concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.ResolveHubs">
      <summary>Résout tous les concentrateurs disponibles en leurs objets concrets.</summary>
      <returns>Liste des instances du concentrateur.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext">
      <summary>Description d’un appel de méthode de concentrateur côté client provenant d’un serveur.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Connection">
      <summary>Obtient <see cref="T:Microsoft.AspNet.SignalR.IConnection" />, le cas échéant, correspondant au client qui a appelé la méthode de concentrateur côté serveur qui appelle la méthode de concentrateur côté client.</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.IConnection" />, le cas échéant, correspondant au client qui a appelé la méthode de concentrateur côté serveur qui appelle la méthode de concentrateur côté client.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.ExcludedSignals">
      <summary>Obtient les signaux (ConnectionID, nom de type de concentrateur ou nom de type de concentrateur + « . » + nom du groupe) appartenant aux clients ne devant pas recevoir l’appel de méthode, indépendamment du <see cref="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signal" /> .</summary>
      <returns>Signaux (ConnectionID, nom de type de concentrateur ou nom de type de concentrateur + « . » + nom du groupe) appartenant aux clients ne devant pas recevoir l’appel de méthode, indépendamment du <see cref="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signal" /> .</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Invocation">
      <summary>Obtient la description de l'appel de méthode à effectuer sur le client.</summary>
      <returns>Description de l’appel de méthode à effectuer sur le client.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signal">
      <summary>Obtient le signal (ConnectionID, nom de type de concentrateur ou nom de type de concentrateur + « . » + nom du groupe) appartenant aux clients qui reçoivent l’appel de méthode.</summary>
      <returns>Signal (ConnectionID, nom de type de concentrateur ou nom de type de concentrateur + « . » + nom du groupe) appartenant aux clients qui reçoivent l’appel de méthode.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signals">
      <summary>Signaux (ConnectionID, nom de type de concentrateur ou nom de type de concentrateur + « . » + nom du groupe) appartenant aux clients qui reçoivent l’appel de méthode.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline">
      <summary>Collection de modules pouvant intercepter et personnaliser divers stades du traitement de concentrateur, comme la connexion, la reconnexion, la déconnexion, l’appel de méthodes de concentrateur côté serveur, l’appel de méthodes de concentrateur côté client, l’autorisation de clients de concentrateur et la réintégration des groupes de concentrateurs.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)">
      <summary>Ajoute un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule" /> au pipeline de concentrateur.Les modules ajoutés en premier au pipeline encapsuleront les modules qui sont ajoutés au pipeline plus tard.Tous les modules doivent être ajoutés au pipeline avant l’appel de toute méthode sur l’<see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker" />.</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> lui-même avec le module nouvellement ajouté permettant aux appels <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)" /> d’être enchaînés.Cette méthode mute le pipeline sur lequel elle est invoquée afin qu’il ne soit pas nécessaire de stocker le résultat.</returns>
      <param name="pipelineModule">Module pouvant intercepter et personnaliser divers stades du traitement de concentrateur, comme la connexion, la reconnexion, la déconnexion, l’appel de méthodes de concentrateur côté serveur, l’appel de méthodes de concentrateur côté client, l’autorisation de clients de concentrateur et la réintégration des groupes de concentrateurs.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker">
      <summary>Les implémentations de cette interface sont responsables de l’exécution de l’opération requise pour réaliser les divers stades du traitement du concentrateur, comme la connexion, la reconnexion, la déconnexion, l’appel de méthodes de concentrateur côté serveur, l’appel de méthodes de concentrateur côté client, l’autorisation de clients de concentrateur, et la réintégration des groupes de concentrateurs.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.AuthorizeConnect(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>À appeler avant qu’un client s’abonne aux signaux appartenant au concentrateur décrit par le <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" />.Par défaut, le <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> recherchera des attributs sur le <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> pour déterminer si le client est autorisé à s’abonner aux appels de méthode pour le concentrateur décrit.</summary>
      <returns>La valeur est True si le client est autorisé à s’abonner aux appels de méthode de concentrateur côté client ; sinon False.</returns>
      <param name="hubDescriptor">Description du concentrateur auquel le client tente de se connecter.</param>
      <param name="request">La demande de connexion effectuée par le client qui doit inclure l’utilisateur <see cref="T:System.Security.Principal.IPrincipal" /> du client.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Connect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>À appeler lorsqu’un client se connecte au <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> pour chaque <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> auquel se connecte le client.Par défaut, cela engendre l’appel de la méthode OnConnected du <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="hub">
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> auquel le client est connecté.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Disconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>À appeler lorsqu’un client se déconnecte du <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> pour chaque <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> auquel était connecté le client.Par défaut, cela engendre l’appel de la méthode OnDisconnected du <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="hub">
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> duquel le client a été déconnecté.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Invoke(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>Appelle une méthode de concentrateur côté serveur.</summary>
      <returns>Opération asynchrone donnant la valeur de retour de l’appel de méthode de concentrateur côté serveur.</returns>
      <param name="context">Description de l’appel de méthode de concentrateur côté serveur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Reconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>À appeler lorsqu’un client se reconnecte au <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> pour chaque <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> auquel se connecte le client.Par défaut, cela engendre l’appel de la méthode OnReconnected du <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="hub">
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> auquel le client s’est reconnecté.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.RejoiningGroups(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String})">
      <summary>Cette méthode détermine les groupes appartenant au concentrateur décrit par le <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> que le client doit être autorisé à rejoindre.Par défaut, les clients qui se reconnectent au serveur seront supprimés de tous les groupes dont ils peuvent avoir été membres précédemment, car les clients non approuvés peuvent déclarer être membres de groupes qu’ils n’ont jamais été autorisés à rejoindre.</summary>
      <returns>Liste des groupes que le client est autorisé à rejoindre.</returns>
      <param name="hubDescriptor">Description du concentrateur pour lequel le client tente de rejoindre des groupes.</param>
      <param name="request">Requête de reconnexion effectuée par le client qui tente de rejoindre les groupes.</param>
      <param name="groups">Liste des groupes appartenant au concentrateur approprié dont le client déclare avoir été membre avant la reconnexion.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Send(Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext)">
      <summary>Appelle une méthode de concentrateur côté client.</summary>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="context">Description de l’appel de méthode de concentrateur côté client.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule">
      <summary>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule" /> pouvant intercepter et personnaliser divers stades du traitement de concentrateur, comme la connexion, la reconnexion, la déconnexion, l’appel de méthodes de concentrateur côté serveur, l’appel de méthodes de concentrateur côté client, l’autorisation de clients de concentrateur et la réintégration des groupes de concentrateurs.Les modules peuvent être activés en appelant <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)" />.Les modules combinés ajoutés au <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> sont invoqués via l’interface <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildAuthorizeConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Boolean})">
      <summary>Encapsule une fonction à appeler avant qu’un client s’abonne aux signaux appartenant au concentrateur décrit par le <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" />.Par défaut, le <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> recherchera des attributs sur le <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> pour déterminer si le client est autorisé à s’abonner aux appels de méthode pour le concentrateur décrit.La fonction renvoie la valeur True si le client est autorisé à s’abonné aux appels de méthode de concentrateur côté client ; sinon False.</summary>
      <returns>Fonction encapsulée indiquant si le client est autorisé ou non à se connecter au concentrateur décrit.</returns>
      <param name="authorizeConnect">Fonction indiquant si le client est autorisé ou non à se connecter au concentrateur décrit.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>Encapsule une fonction appelée lorsqu’un client se connecte au <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> pour chaque <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> auquel se connecte le client.Par défaut, cela engendre l’appel de la méthode OnConnected du <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Fonction encapsulée à appeler lorsqu’un client se connecte à un concentrateur.</returns>
      <param name="connect">Fonction à appeler lorsqu’un client se connecte à un concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildDisconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>Encapsule une fonction qui est appelée lorsqu’un client se déconnecte du <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> pour chaque <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> auquel le client était connecté.Par défaut, cela engendre l’appel de la méthode OnDisconnected du <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Fonction encapsulée à appeler lorsqu’un client se déconnecte d’un concentrateur.</returns>
      <param name="disconnect">Fonction à appeler lorsqu’un client se déconnecte d’un concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})">
      <summary>Encapsule une fonction qui appelle une méthode de concentrateur côté serveur.Même si un client n’est pas autorisé à se connecter à un concentrateur, il sera autorisé à appeler des méthodes côté serveur sur ce concentrateur sauf si cela est empêché dans <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> en n’exécutant pas le paramètre d’appel.</summary>
      <returns>Fonction encapsulée qui appelle une méthode de concentrateur côté serveur.</returns>
      <param name="invoke">Fonction qui appelle une méthode de concentrateur côté serveur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildOutgoing(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext,System.Threading.Tasks.Task})">
      <summary>Encapsule une fonction qui appelle une méthode de concentrateur côté client.</summary>
      <returns>Fonction encapsulée qui appelle une méthode de concentrateur côté client.</returns>
      <param name="send">Fonction qui appelle une méthode de concentrateur côté client.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildReconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>Encapsule une fonction qui est appelée lorsqu’un client se reconnecte au <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> pour chaque <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> auquel se connecte le client.Par défaut, cela engendre l’appel de la méthode OnReconnected du <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Fonction encapsulée à appeler lorsqu’un client se reconnecte à un concentrateur.</returns>
      <param name="reconnect">Fonction à appeler lorsqu’un client se reconnecte à un concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildRejoiningGroups(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String}})">
      <summary>Encapsule une fonction qui détermine les groupes appartenant au concentrateur décrit par le <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> que le client doit être autorisé à rejoindre.Par défaut, les clients qui se reconnectent au serveur seront supprimés de tous les groupes dont ils peuvent avoir été membres précédemment, car les clients non approuvés peuvent déclarer être membres de groupes qu’ils n’ont jamais été autorisés à rejoindre.</summary>
      <returns>Fonction encapsulée déterminant les groupes que le client doit être autorisé à rejoindre.</returns>
      <param name="rejoiningGroups">Fonction déterminant les groupes que le client doit être autorisé à rejoindre.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubRequestParser">
      <summary>Gère les requêtes d’analyse entrantes à travers le <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubRequestParser.Parse(System.String,Newtonsoft.Json.JsonSerializer)">
      <summary>Analyse la charge de travail de concentrateur entrante dans une <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubRequest" />.</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubRequest" /> engendrée.</returns>
      <param name="data">Charge de travail de concentrateur brute.</param>
      <param name="serializer">Le JsonSerializer utilisé pour analyser les données.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier">
      <summary>Combine, minimise et met en cache le JavaScript du concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier.Minify(System.String)">
      <summary>Obtient la source spécifiée du <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier" />.</summary>
      <returns>La source spécifiée du <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier" />.</returns>
      <param name="source">La source minimisée.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator">
      <summary>Génère le service proxy pour l'interface JavaScript.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator.GenerateProxy(System.String)">
      <summary>Génère un proxy pour l'URL de service du <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator" />.</summary>
      <returns>Proxy pour générer l'URL de service pour le <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator" />.</returns>
      <param name="serviceUrl">Le service d'URL.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IMethodDescriptorProvider">
      <summary>Décrit un fournisseur de méthode de concentrateur qui crée une collection de méthodes disponibles sur un concentrateur donné.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IMethodDescriptorProvider.GetMethods(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>Récupère toutes les méthodes sur un concentrateur donné.</summary>
      <returns>Méthodes disponibles.</returns>
      <param name="hub">Objet de descripteur de concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IMethodDescriptorProvider.TryGetMethod(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.String,Microsoft.AspNet.SignalR.Hubs.MethodDescriptor@,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>Tente de récupérer une méthode.</summary>
      <returns>La valeur est True si une méthode a été trouvée.</returns>
      <param name="hub">Objet de descripteur de concentrateur</param>
      <param name="method">Nom de la méthode.</param>
      <param name="descriptor">Descripteur de la méthode, s’est est trouvé.Sinon, renvoie la valeur Null.</param>
      <param name="parameters">Paramètres de méthode à rechercher.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IParameterResolver">
      <summary>Décrit un programme de résolution des paramètres pour résoudre les valeurs correspondant à des paramètres en fonction des informations fournies.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IParameterResolver.ResolveMethodParameters(Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>Résout les valeurs de paramètre de méthode en fonction des objets fournis.</summary>
      <returns>Tableau de valeurs de paramètre.</returns>
      <param name="method">Descripteur de méthode.</param>
      <param name="values">Liste des valeurs à partir desquelles résoudre les valeurs de paramètre.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor">
      <summary>Représente des informations sur une méthode de concentrateur unique.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Attributes">
      <summary>Obtient ou définit les attributs associés à cette méthode.</summary>
      <returns>Attributs associés à cette méthode.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Hub">
      <summary>Obtient l'objet de descripteur de concentrateur, cible de cette méthode.</summary>
      <returns>Objet de descripteur de concentrateur, cible de cette méthode.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Invoker">
      <summary>Obtient ou définit le délégué d'appel de la méthode.Utilise un concentrateur cible et un tableau d’arguments d’appel comme arguments.</summary>
      <returns>Délégué d’appel de la méthode.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Parameters">
      <summary>Obtient ou définit les paramètres de méthode disponibles.</summary>
      <returns>Paramètres de méthode disponibles.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.ReturnType">
      <summary>Obtient ou définit le type de retour de cette méthode.</summary>
      <returns>Type de retour de cette méthode.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.MethodExtensions">
      <summary>Représente l'extension des méthodes pour les concentrateurs SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MethodExtensions.Matches(Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>Spécifie si une extension de méthode correspond à un autre descripteur de méthode.</summary>
      <returns>true si une extension de méthode correspond à un descripteur de méthode ; sinon, false.</returns>
      <param name="methodDescriptor">Descripteur de la méthode.</param>
      <param name="parameters">Liste des paramètres.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.Collections.Generic.IList{System.String},System.String,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.GetInvocationData(System.String,System.Object[])"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.Invoke(System.String,System.Object[])"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException">
      <summary>Représente une exception qui est levée quand un client n'est pas autorisé à se connecter à un concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" /> avec les données sérialisées.</summary>
      <param name="info">Informations sérialisées sur l'exception.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" /> avec un message d'erreur.</summary>
      <param name="message">Le message relatif à l'exception.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" /> avec le message d'erreur et l'exception interne.</summary>
      <param name="message">Le message relatif à l'exception.</param>
      <param name="inner">L'erreur ayant provoqué l'exception.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier">
      <summary>Représente une minimisation d'une valeur JavaScript null.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier" />.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier.Instance">
      <summary>Spécifie l'instance <see cref="T:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier.Minify(System.String)">
      <summary>Minimise la source spécifiée du JavaScript.</summary>
      <returns>La source minimisée.</returns>
      <param name="source">Source à minimiser.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor">
      <summary>Provides details about the null method.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor" /> class.</summary>
      <param name="methodName">The name for this null method.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.Attributes">
      <summary>Gets or sets the attributes attached to this method.</summary>
      <returns>The attributes attached to this method.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.Invoker">
      <summary>Gets or sets the method invocation delegate. Takes a target hub and an array of invocation arguments as it's arguments.</summary>
      <returns>The method invocation delegate.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.Parameters">
      <summary>Gets or sets the available method parameters.</summary>
      <returns>The available method parameters.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor">
      <summary>Représente des informations sur un paramètre de méthode de concentrateur unique.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor.Name">
      <summary>Obtient ou définit le nom du paramètre.</summary>
      <returns>Le nom du paramètre.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor.ParameterType">
      <summary>Obtient ou définit le type de paramètre.</summary>
      <returns>Le type de paramètre.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider">
      <summary>Décrit le fournisseur de descripteurs de concentrateur et fournit des informations réfléchies sur les concentrateurs disponibles.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider" />.</summary>
      <param name="resolver">
        <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.BuildHubsCache">
      <summary>Extrait la collection de connexions pour construire un cache de concentrateur.</summary>
      <returns>Collection de connexions pour construire un cache de concentrateur.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.GetHubs">
      <summary>Récupère tous les concentrateurs disponibles. </summary>
      <returns>La collection de concentrateurs disponibles.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.TryGetHub(System.String,Microsoft.AspNet.SignalR.Hubs.HubDescriptor@)">
      <summary>Tente de récupérer le concentrateur ayant le nom donné.</summary>
      <returns>true si le concentrateur a été trouvé ; sinon, false.</returns>
      <param name="hubName">Nom du concentrateur à récupérer.</param>
      <param name="descriptor">Lorsque cette méthode est retournée, elle contient l'objet descripteur récupéré.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider">
      <summary>Représente la méthode reflétée pour le fournisseur du descripteur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider.GetMethods(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>Retourne une collection de méthode pour le fournisseur.</summary>
      <returns>Collection de méthode pour le fournisseur.</returns>
      <param name="hub">Le descripteur du concentrateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider.TryGetMethod(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.String,Microsoft.AspNet.SignalR.Hubs.MethodDescriptor@,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>Recherche le <paramref name="hub" /> spécifié pour la <paramref name="method" /> indiquée.</summary>
      <returns>true si la méthode qui correspond au jeu de paramètres/noms est détectée sur le concentrateur ; sinon, false.</returns>
      <param name="hub">Concentrateur où rechercher la <paramref name="method" /> indiquée.</param>
      <param name="method">Nom de méthode à rechercher.</param>
      <param name="descriptor">En cas de réussite, <see cref="T:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor" /> résolu.</param>
      <param name="parameters">Jeu de paramètres qui permet de rechercher une surcharge spécifique de la <paramref name="method" /> indiquée.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ReflectionHelper">
      <summary>Représente un programme d'assistance de réflexion.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectionHelper.GetAttributeValue``2(System.Reflection.ICustomAttributeProvider,System.Func{``0,``1})">
      <summary>Obtient la valeur d'attribut pour ce programme d'assistance.</summary>
      <returns>Valeur d'attribut pour ce programme d'assistance.</returns>
      <param name="source">La source où obtenir la valeur.</param>
      <param name="valueGetter">Getter de la valeur.</param>
      <typeparam name="TAttribute">Type de l'attribut.</typeparam>
      <typeparam name="TResult">Type de résultat.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectionHelper.GetExportedHubMethods(System.Type)">
      <summary>Obtient une liste de méthodes de concentrateur exportées.</summary>
      <returns>Liste de méthodes de concentrateur exportées.</returns>
      <param name="type">Type de méthodes à obtenir.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.SignalProxy">
      <summary>Représente le proxy du signal utilisé par le concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Connection"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.GetInvocationData(System.String,System.Object[])">
      <summary>Obtient les données d'appel du concentrateur du client associées au proxy.</summary>
      <returns>Les données d'appel du concentrateur du client associées au proxy.</returns>
      <param name="method">La méthode.</param>
      <param name="args">Arguments.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.HubName">
      <summary>Obtient ou définit le nom du concentrateur.</summary>
      <returns>Nom du concentrateur.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Invoke(System.String,System.Object[])">
      <summary>Invoque une méthode et retourne les résultats de l'appel de la méthode.</summary>
      <returns>Résultat de l'opération.</returns>
      <param name="method">La méthode à appeler.</param>
      <param name="args">Le tableau d'argument.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Invoker"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Signal">
      <summary>Obtient ou définit le signal associé au <see cref="T:Microsoft.AspNet.SignalR.Hubs.SignalProxy" />.</summary>
      <returns>Le signal associé au <see cref="T:Microsoft.AspNet.SignalR.Hubs.SignalProxy" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Fournit l'implémentation pour les opérations qui obtiennent des valeurs de membre.</summary>
      <returns>true si l'opération réussit ; sinon, false.</returns>
      <param name="binder">Les informations sur l'objet qui a appelé l'opération dynamique.</param>
      <param name="result">Résultat de l'opération Get.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>Fournit l'implémentation pour les opérations qui appellent un membre.</summary>
      <returns>true si l'opération réussit ; sinon, false.</returns>
      <param name="binder">Fournit des informations sur l'opération dynamique.</param>
      <param name="args">Arguments transmis au membre objet lors de l'opération d'appel.</param>
      <param name="result">Résultat de l’appel du membre.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker">
      <summary>Représente un dictionnaire de suivi des modifications.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker" />.</summary>
      <param name="values">La valeur du dictionnaire.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.GetChanges">
      <summary>Obtient les modifications associées au suivi.</summary>
      <returns>Les modifications associées au suivi.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.Item(System.String)">
      <summary>Obtient ou définit l'élément associé au suivi en utilisant une clé spécifiée.</summary>
      <returns>L'élément associé au suivi en utilisant une clé spécifiée.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy">
      <summary>Représente le proxy du signal avec état utilisé par le concentrateur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.String,Microsoft.AspNet.SignalR.Hubs.StateChangeTracker)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.GetInvocationData(System.String,System.Object[])">
      <summary>Obtient les données d'appel du concentrateur du client associées au proxy.</summary>
      <returns>Les données d'appel du concentrateur du client associées au proxy.</returns>
      <param name="method">La méthode.</param>
      <param name="args">Arguments.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Fournit l'implémentation pour les opérations qui obtiennent des valeurs de membre.</summary>
      <returns>true si l'opération réussit ; sinon, false.</returns>
      <param name="binder">Les informations sur l'objet qui a appelé l'opération dynamique.</param>
      <param name="result">Résultat de l'opération Get.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Fournit l'implémentation pour les opérations qui définissent les valeurs des membres.</summary>
      <returns>true si l'opération réussit ; sinon, false.</returns>
      <param name="binder">Les informations sur l'objet qui a appelé l'opération dynamique.</param>
      <param name="value">Résultat de l'opération Set.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.UserProxy"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.UserProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler">
      <summary>Représente une instance qui gère l'App Certification Kit (ACK).</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.#ctor(System.Boolean,System.TimeSpan,System.TimeSpan)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler" />.</summary>
      <param name="completeAcksOnTimeout">true si l'ACK est exécuté au délai d'expiration ; sinon, false.</param>
      <param name="ackThreshold">Seuil de l'ACK.</param>
      <param name="ackInterval">Intervalle de l'ACK.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.CreateAck(System.String)">
      <summary>Crée un nouvel objet ACK.</summary>
      <returns>L'objet ACK créé.</returns>
      <param name="id">L'identificateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.Dispose">
      <summary>Libère toutes les ressources utilisées par le <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.Dispose(System.Boolean)">
      <summary>Libérez toutes les ressources utilisées par cette instance .</summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.TriggerAck(System.String)">
      <summary>Déclenche un objet ACK spécifié.</summary>
      <returns>Résultat de l'opération.</returns>
      <param name="id">L'identificateur ACK.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader">
      <summary>Représente le lecteur de texte associé au segment de tableau.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader.#ctor(System.ArraySegment{System.Byte},System.Text.Encoding)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader" />.</summary>
      <param name="buffer">La mémoire tampon du segment de tableau.</param>
      <param name="encoding">Codage.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Lit un nombre maximum spécifié de caractères à partir du lecteur lectuel et écrit les données dans une mémoire tampon, en commençant à l'index spécifié.</summary>
      <returns>Le nombre de caractères qui ont été lus.</returns>
      <param name="buffer">Contient le tableau de caractères spécifié avec les valeurs entre index et remplacées par les caractères lus à partir de la source actuelle.</param>
      <param name="index">La position dans la mémoire tampon où commencer l'écriture.</param>
      <param name="count">Le nombre maximum de caractères à lire.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.Connection">
      <summary>Aucun contenu ne sera mis à jour. N'ajoutez pas de matériel ici.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.Connection.#ctor(Microsoft.AspNet.SignalR.Messaging.IMessageBus,Newtonsoft.Json.JsonSerializer,System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},Microsoft.AspNet.SignalR.Tracing.ITraceManager,Microsoft.AspNet.SignalR.Infrastructure.IAckHandler,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Infrastructure.IProtectedData)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.Connection" />.</summary>
      <param name="newMessageBus">Le nouveau bus de messages.</param>
      <param name="jsonSerializer">Le sérialiseur JSON.</param>
      <param name="baseSignal">Signal de base.</param>
      <param name="connectionId">ID de connexion.</param>
      <param name="signals">Collection de signaux.</param>
      <param name="groups">Collection de groupes.</param>
      <param name="traceManager">Gestionnaire de traces.</param>
      <param name="ackHandler">Gestionnaire ack.</param>
      <param name="performanceCounterManager">Le gestionnaire du compteur de performances.</param>
      <param name="protectedData">Données protégées.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.DefaultSignal">
      <summary>Obtient le signal principal de cette connexion.</summary>
      <returns>Signal principal de cette connexion.</returns>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Infrastructure.Connection.EventKeyAdded">
      <summary>Survient lorsque l'événement ajoute une clé.</summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Infrastructure.Connection.EventKeyRemoved">
      <summary>Survient lorsque l'événement supprime une clé.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.Identity">
      <summary>Obtient une identité relative aux propriétés de cette connexion.</summary>
      <returns>Identité relative aux propriétés de cette connexion.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.Microsoft#AspNet#SignalR#Messaging#ISubscriber#EventKeys">
      <summary>Obtient une liste d'objets qu'il est possible de consulter au cas par cas selon l'index.</summary>
      <returns>Liste d'objets qu'il est possible de consulter au cas par cas selon l'index.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.Connection.Receive(System.String,System.Func{Microsoft.AspNet.SignalR.Transports.PersistentResponse,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>Reçoit une réponse à une méthode de connexion.</summary>
      <returns>Réponse à la méthode de connexion en réception.</returns>
      <param name="messageId">ID du message.</param>
      <param name="callback">Indique si la connexion appelle une réponse.</param>
      <param name="maxMessages">Nombre de messages maximal.</param>
      <param name="state">État de la connexion.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.Connection.Send(Microsoft.AspNet.SignalR.ConnectionMessage)">
      <summary>Envoie un message à une ou plusieurs connexions.</summary>
      <returns>Message envoyé à une ou plusieurs connexions.</returns>
      <param name="message">Connexions relatives au message.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.Subscription">
      <summary>Obtient ou définit un abonnement à cette propriété de connexion.</summary>
      <returns>Abonnement à cette propriété de connexion.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.WriteCursor">
      <summary>Obtient ou définit le curseur permettant d'écrire les séries de caractères séquentielles.</summary>
      <returns>Curseur pour écrire des séries de caractères séquentielles.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager">
      <summary>Fournit une implémentation <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager" /> par défaut.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager" />.</summary>
      <param name="resolver">
        <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetConnection(System.Type)">
      <summary>Renvoie un <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> pour la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> pour la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</returns>
      <param name="type">Type de la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetConnectionContext``1">
      <summary>Renvoie un <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> pour la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> pour la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</returns>
      <typeparam name="T">Type de la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetHubContext``1">
      <summary>Retourne le contexte du concentrateur pour cette connexion.</summary>
      <returns>Le contexte du concentrateur pour cette connexion.</returns>
      <typeparam name="T">Type du concentrateur.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetHubContext(System.String)">
      <summary>Retourne le contexte du concentrateur pour cette connexion compte tenu du nom spécifié.</summary>
      <returns>Le contexte du concentrateur pour cette connexion.</returns>
      <param name="hubName">Nom du concentrateur.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData">
      <summary>Fournit des méthodes de protection des données.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData.#ctor(Microsoft.Owin.Security.DataProtection.IDataProtectionProvider)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData" />.</summary>
      <param name="provider">Fournisseur de protection de données.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData.Protect(System.String,System.String)">
      <summary>Protège les données spécifiées.</summary>
      <returns>Données protégées.</returns>
      <param name="data">Données à protéger.</param>
      <param name="purpose">L'objectif de la protection.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData.Unprotect(System.String,System.String)">
      <summary>Supprime la protection des données spécifiées.</summary>
      <returns>Données non protégées.</returns>
      <param name="protectedValue">Données protégées.</param>
      <param name="purpose">L'objectif de la protection.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData">
      <summary>Fournit des méthodes de protection des données.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData.Protect(System.String,System.String)">
      <summary>Protège les données spécifiées.</summary>
      <returns>Données protégées.</returns>
      <param name="data">Données à protéger.</param>
      <param name="purpose">L'objectif de la protection.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData.Unprotect(System.String,System.String)">
      <summary>Supprime la protection des données spécifiées.</summary>
      <returns>Données non protégées.</returns>
      <param name="protectedValue">Données protégées.</param>
      <param name="purpose">L'objectif de la protection.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IAckHandler">
      <summary>Fournit une interface qui représente l'instance qui gère l'App Certification Kit (ACK).</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IAckHandler.CreateAck(System.String)">
      <summary>Crée un nouvel objet ACK.</summary>
      <returns>L'objet ACK créé.</returns>
      <param name="id">L'identificateur.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IAckHandler.TriggerAck(System.String)">
      <summary>Déclenche un objet ACK spécifié.</summary>
      <returns>Résultat de l'opération.</returns>
      <param name="id">L'identificateur ACK.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IBinaryWriter">
      <summary>Represents the base interface for class that has the ability to write raw binary data.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IBinaryWriter.Write(System.ArraySegment{System.Byte})">
      <summary>Writes raw binary data to underlying stream.</summary>
      <param name="data">The raw binary data to write.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager">
      <summary>Fournit l’accès aux concentrateurs et aux références et connexions persistantes.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager.GetConnectionContext``1">
      <summary>Renvoie un <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> pour la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> pour la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</returns>
      <typeparam name="T">Type de la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager.GetHubContext``1">
      <summary>Retourne les informations du concentrateur associées à la connexion.</summary>
      <returns>Les informations du concentrateur associées à la connexion.</returns>
      <typeparam name="T">Type du concentrateur.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager.GetHubContext(System.String)">
      <summary>Retourne les informations du concentrateur associées à la connexion.</summary>
      <returns>Les informations du concentrateur associées à la connexion.</returns>
      <param name="hubName">Nom du concentrateur.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.InterlockedHelper">
      <summary>Représente l'application d'assistance pour les opérations atomiques pour les variables partagées par plusieurs threads.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.InterlockedHelper.CompareExchangeOr(System.Int32@,System.Int32,System.Int32,System.Int32)">
      <summary>Compare l'égalité de référence de deux objets et leur égalité.</summary>
      <returns>true si les deux objets sont égaux ; sinon, false.</returns>
      <param name="location">Objet de destination comparé avec le comparateur et éventuellement remplacé. </param>
      <param name="value">Objet qui remplace l'objet de destination si la comparaison détecte une égalité.</param>
      <param name="comparandA">Premier comparateur.</param>
      <param name="comparandB">Deuxième comparateur.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter">
      <summary>Aucun contenu ne sera mis à jour. N'ajoutez pas de matériel ici.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.Close">
      <summary>Ferme le compteur de performances et libère toutes les ressources allouées à cette instance PerformanceCounter.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.CounterName"></member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.Decrement">
      <summary>Décrémente de un les compteurs de performances associés grâce à une opération atomique efficace.</summary>
      <returns>Valeur du compteur décrémentée.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.Increment">
      <summary>Incrémente de un les compteurs de performances associés grâce à une opération atomique efficace.</summary>
      <returns>Valeur du compteur incrémentée.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.IncrementBy(System.Int64)">
      <summary>Incrémente ou décrémente d'un montant spécifié la valeur des compteurs de performances associés grâce à une opération atomique efficace.</summary>
      <returns>Nouvelle valeur du compteur.</returns>
      <param name="value">Valeur d'incrémentation.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.NextSample">
      <summary>Obtient un exemple de compteur et retourne une valeur brute ou non calculée pour ce compteur.</summary>
      <returns>Exemple de compteur et retourne une valeur brute ou non calculée pour ce compteur.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.RawValue">
      <summary>Obtient ou définit la valeur brute ou non calculée de ce compteur.</summary>
      <returns>Valeur brute du compteur.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.RemoveInstance">
      <summary>Supprime l'instance de catégorie spécifiée par la propriété InstanceName de l'objet PerformanceCounter.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager">
      <summary>Fournit l’accès aux compteurs de performances.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesReceivedPerSec">
      <summary>Obtient le compteur de performances représentant le nombre de messages reçus par les connexions (de serveur à client) par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesReceivedTotal">
      <summary>Obtient le compteur de performances représentant le nombre total de messages reçus par les connexions (de serveur à client) depuis le démarrage de l'application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesSentPerSec">
      <summary>Obtient le compteur de performances représentant le nombre de messages envoyés par les connexions (de client à serveur) par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesSentTotal">
      <summary>Obtient le compteur de performances représentant le nombre total de messages envoyés par les connexions (de client à serveur) depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsConnected">
      <summary>Obtient le compteur de performances représentant le nombre total de connexions d’événements Connexion depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsCurrent">
      <summary>Obtient le compteur de performances représentant le nombre de connexions actuellement connectées.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsDisconnected">
      <summary>Obtient le compteur de performances représentant le nombre total de connexions d’événements Déconnexion depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsReconnected">
      <summary>Obtient le compteur de performances représentant le nombre total de connexions d’événements Reconnexion depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsAllPerSec">
      <summary>Obtient le compteur de performances représentant le nombre de toutes les erreurs traitées par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsAllTotal">
      <summary>Obtient le compteur de performances représentant le nombre total de toutes les erreurs traitées depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubInvocationPerSec">
      <summary>Obtient le compteur de performances représentant le nombre d’erreurs d’appels de concentrateur par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubInvocationTotal">
      <summary>Obtient le compteur de performances représentant le nombre total d’erreurs d’appel de concentrateur traitées depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubResolutionPerSec">
      <summary>Obtient le compteur de performances représentant le nombre d’erreurs de résolutions de concentrateur par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubResolutionTotal">
      <summary>Obtient le compteur de performances représentant le nombre total d’erreurs de résolutions de concentrateur traitées depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsTransportPerSec">
      <summary>Obtient le compteur de performances représentant le nombre d’erreurs de transport par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsTransportTotal">
      <summary>Obtient le compteur de performances représentant le nombre total d’erreurs de transport traitées depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.Initialize(System.String,System.Threading.CancellationToken)">
      <summary>Initialiser les compteurs de performances.</summary>
      <param name="instanceName">Nom de l’instance de l’hôte.</param>
      <param name="hostShutdownToken">CancellationToken représentant l’arrêt de l’hôte.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.LoadCounter(System.String,System.String,System.String,System.Boolean)">
      <summary>Charge un compteur de performances.</summary>
      <param name="categoryName">Nom de la catégorie.</param>
      <param name="counterName">Nom du compteur.</param>
      <param name="instanceName">Nom de l’instance.</param>
      <param name="isReadOnly">Si le compteur est en lecture seule.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusAllocatedWorkers">
      <summary>Obtient le compteur de performances représentant le nombre de travaux alloués pour remettre des messages dans le bus de messages.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusBusyWorkers">
      <summary>Obtient le compteur de performances représentant le nombre de travaux actuellement occupés à remettre des messages dans le bus de messages.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesPublishedPerSec">
      <summary>Obtient le compteur de performances représentant le nombre de messages publiés dans le bus de messages par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesPublishedTotal">
      <summary>Obtient le compteur de performances représentant le nombre total de messages publiés dans le bus de messages depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesReceivedPerSec">
      <summary>Obtient le compteur de performances représentant le nombre de messages reçus par les abonnés par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesReceivedTotal">
      <summary>Obtient le compteur de performances représentant le nombre total de messages reçus par les abonnés depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusSubscribersCurrent">
      <summary>Obtient le compteur de performances représentant le nombre actuel d’abonnés au bus de messages.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusSubscribersPerSec">
      <summary>Obtient le compteur de performances représentant le nombre de nouveaux abonnés au bus de messages par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusSubscribersTotal">
      <summary>Obtient le compteur de performances représentant le nombre total d’abonnés au bus de messages depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusTopicsCurrent">
      <summary>Obtient le compteur de performances représentant le nombre actuel de rubriques dans le bus de messages.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutErrorsPerSec">
      <summary>Obtient le compteur de performances représentant le nombre d’erreurs de montée en puissance (scaleout) par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutErrorsTotal">
      <summary>Obtient le compteur de performances représentant le nombre total d’erreurs de montée en puissance (scaleout) depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutMessageBusMessagesReceivedPerSec">
      <summary>Obtient le compteur de performances représentant le nombre de messages reçus dans le bus de messages de montée en puissance (scaleout) par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutSendQueueLength">
      <summary>Obtient le compteur de performances représentant la longueur de la file d'attente d'envoi de montée en puissance (scaleout) actuelle.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutStreamCountBuffering">
      <summary>Obtient le compteur de performances représentant le nombre de flux logiques dans le fournisseur de bus de messages de montée en puissance (scaleout) configuré actuellement qui se trouvent dans l'état de mise en mémoire tampon.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutStreamCountOpen">
      <summary>Obtient le compteur de performances représentant le nombre de flux logiques dans le fournisseur de bus de messages de montée en puissance (scaleout) configuré actuellement qui se trouvent dans l'état ouvert.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutStreamCountTotal">
      <summary>Obtient le compteur de performances représentant le nombre de flux logiques dans le fournisseur de bus de messages de montée en puissance (scaleout) configuré actuellement.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IProtectedData">
      <summary>Représente une interface qui fournit des méthodes pour chiffrer et déchiffrer les données associées à l'infrastructure SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IProtectedData.Protect(System.String,System.String)">
      <summary>Protège des données spécifiées.</summary>
      <returns>Données protégées.</returns>
      <param name="data">Données à protéger.</param>
      <param name="purpose">L'objectif de la protection.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IProtectedData.Unprotect(System.String,System.String)">
      <summary>Lève la protection de données spécifiques.</summary>
      <returns>Données non protégées.</returns>
      <param name="protectedValue">La valeur protégée à déprotéger.</param>
      <param name="purpose">Le motif de la levée de la protection.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IServerIdManager">
      <summary>Génère un ID de serveur</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IServerIdManager.ServerId">
      <summary>ID du serveur.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier">
      <summary>Fournit une interface qui représente une classe qui réduit la taille d'une chaîne.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)">
      <summary>Réduit une chaîne de manière à ce qu'elle puisse être inversée par cette instance de <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier" />.</summary>
      <returns>Représentation réduite de la <paramref name="value" /> sans les caractères « , », « | » et « \ ».</returns>
      <param name="value">Chaîne à réduire.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.RemoveUnminified(System.String)">
      <summary>Un appel à cette fonction indique que les futures tentatives d'annulation de la réduction des chaînes précédemment réduites à partir de la <paramref name="value" /> peuvent réussir avec une valeur renvoyée null.Cela permet de nettoyer les structures de données internes qui référencent la <paramref name="value" />.</summary>
      <param name="value">Chaîne précédemment réduite.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Unminify(System.String)">
      <summary>Inverse un appel <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> qui a été exécuté au moins une fois précédemment sur cette instance de <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier" /> sans nouvel appel à la <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.RemoveUnminified(System.String)" /> partageant le même argument que l'appel <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> qui a renvoyé <paramref name="value" />.</summary>
      <returns>Argument de tous les appels précédents à <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> qui ont renvoyé <paramref name="value" />.Si aucun appel à <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> sur cette instance de <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier" /> n'a renvoyé <paramref name="value" /> ou si l'appel le plus récent à <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> qui n'a pas renvoyé <paramref name="value" /> a été suivi par un appel à une <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.RemoveUnminified(System.String)" /> partageant le même argument, la <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Unminify(System.String)" /> peut renvoyer la valeur null, mais ne doit pas être levée.</returns>
      <param name="value">Chaîne réduite renvoyée par un appel précédent à <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" />.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager">
      <summary>Gère les compteurs de performances en utilisant les compteurs de performances Windows.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.#ctor(Microsoft.AspNet.SignalR.DefaultDependencyResolver)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager" />.</summary>
      <param name="resolver">Programme de résolution des dépendances par défaut.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.#ctor(Microsoft.AspNet.SignalR.Tracing.ITraceManager)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager" />.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.CategoryName">
      <summary>Indique le nom de la catégorie du compteur de performances pour ce compteur de performances.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesReceivedPerSec">
      <summary>Obtient le compteur de performances représentant le nombre de messages reçus par les connexions (de serveur à client) par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesReceivedTotal">
      <summary>Obtient le compteur de performances représentant le nombre total de messages reçus par les connexions (de serveur à client) depuis le démarrage de l'application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesSentPerSec">
      <summary>Obtient le compteur de performances représentant le nombre de messages envoyés par les connexions (de client à serveur) par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesSentTotal">
      <summary>Obtient le compteur de performances représentant le nombre total de messages envoyés par les connexions (de client à serveur) depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsConnected">
      <summary>Obtient le compteur de performances représentant le nombre total de connexions d’événements Connexion depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsCurrent">
      <summary>Obtient le compteur de performances représentant le nombre de connexions actuellement connectées.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsDisconnected">
      <summary>Obtient le compteur de performances représentant le nombre total de connexions d’événements Déconnexion depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsReconnected">
      <summary>Obtient le compteur de performances représentant le nombre total de connexions d’événements Reconnexion depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsAllPerSec">
      <summary>Obtient le compteur de performances représentant le nombre de toutes les erreurs traitées par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsAllTotal">
      <summary>Obtient le compteur de performances représentant le nombre total de toutes les erreurs traitées depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubInvocationPerSec">
      <summary>Obtient le compteur de performances représentant le nombre d’erreurs d’appels de concentrateur par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubInvocationTotal">
      <summary>Obtient le compteur de performances représentant le nombre total d’erreurs d’appel de concentrateur traitées depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubResolutionPerSec">
      <summary>Obtient le compteur de performances représentant le nombre d’erreurs de résolutions de concentrateur par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubResolutionTotal">
      <summary>Obtient le compteur de performances représentant le nombre total d’erreurs de résolutions de concentrateur traitées depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsTransportPerSec">
      <summary>Obtient le compteur de performances représentant le nombre d’erreurs de transport par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsTransportTotal">
      <summary>Obtient le compteur de performances représentant le nombre total d’erreurs de transport traitées depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.Initialize(System.String,System.Threading.CancellationToken)">
      <summary>Initialiser les compteurs de performances.</summary>
      <param name="instanceName">Nom de l’instance de l’hôte.</param>
      <param name="hostShutdownToken">CancellationToken représentant l’arrêt incorrect de l’hôte.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.LoadCounter(System.String,System.String,System.String,System.Boolean)">
      <summary>Charge le compteur de performances.</summary>
      <param name="categoryName">Nom de la catégorie.</param>
      <param name="counterName">Nom du compteur.</param>
      <param name="instanceName">Nom de l’instance.</param>
      <param name="isReadOnly">true si le compteur est en lecture seule ; sinon, false.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusAllocatedWorkers">
      <summary>Obtient le compteur de performances représentant le nombre de travaux alloués pour remettre des messages dans le bus de messages.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusBusyWorkers">
      <summary>Obtient le compteur de performances représentant le nombre de travaux actuellement occupés à remettre des messages dans le bus de messages.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesPublishedPerSec">
      <summary>Obtient le compteur de performances représentant le nombre de messages publiés dans le bus de messages par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesPublishedTotal">
      <summary>Obtient le compteur de performances représentant le nombre total de messages publiés dans le bus de messages depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesReceivedPerSec">
      <summary>Obtient le compteur de performances représentant le nombre de messages reçus par les abonnés par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesReceivedTotal">
      <summary>Obtient le compteur de performances représentant le nombre total de messages reçus par les abonnés depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusSubscribersCurrent">
      <summary>Obtient le compteur de performances représentant le nombre actuel d’abonnés au bus de messages.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusSubscribersPerSec">
      <summary>Obtient le compteur de performances représentant le nombre de nouveaux abonnés au bus de messages par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusSubscribersTotal">
      <summary>Obtient le compteur de performances représentant le nombre total d’abonnés au bus de messages depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusTopicsCurrent">
      <summary>Obtient le compteur de performances représentant le nombre actuel de rubriques dans le bus de messages.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutErrorsPerSec">
      <summary>Obtient le compteur de performances représentant le nombre d’erreurs de montée en puissance (scaleout) par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutErrorsTotal">
      <summary>Obtient le compteur de performances représentant le nombre total d’erreurs de montée en puissance (scaleout) depuis le démarrage de l’application.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutMessageBusMessagesReceivedPerSec">
      <summary>Obtient le compteur de performances représentant le nombre de messages reçus dans le bus de messages de montée en puissance (scaleout) par seconde.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutSendQueueLength">
      <summary>Obtient le compteur de performances représentant la longueur de la file d'attente d'envoi de montée en puissance (scaleout) actuelle.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutStreamCountBuffering">
      <summary>Obtient le compteur de performances représentant le nombre de flux logiques dans le fournisseur de bus de messages de montée en puissance (scaleout) configuré actuellement qui se trouvent dans l'état de mise en mémoire tampon.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutStreamCountOpen">
      <summary>Obtient le compteur de performances représentant le nombre de flux logiques dans le fournisseur de bus de messages de montée en puissance (scaleout) configuré actuellement qui se trouvent dans l'état ouvert.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutStreamCountTotal">
      <summary>Obtient le compteur de performances représentant le nombre de flux logiques dans le fournisseur de bus de messages de montée en puissance (scaleout) configuré actuellement.</summary>
      <returns>Retourne <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.PrincipalUserIdProvider"></member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PrincipalUserIdProvider.#ctor"></member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PrincipalUserIdProvider.GetUserId(Microsoft.AspNet.SignalR.IRequest)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver">
      <summary>Provides method for resolving protocol.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver" /> class.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver.#ctor(System.Version,System.Version)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver" /> class.</summary>
      <param name="min">The minimum version of the protocol to resolve.</param>
      <param name="max">The maximum version of the protocol to resolve.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver.Resolve(Microsoft.AspNet.SignalR.IRequest)">
      <summary>Resolves the protocol in the specified SignalR request.</summary>
      <param name="request">The request to resolve.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.Purposes">
      <summary>Spécifie les constantes des objectifs.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.Purposes.ConnectionToken">
      <summary>La constante ConnectionToken.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.Purposes.Groups">
      <summary>La constante Groups.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ServerCommandType">
      <summary>Spécifie les commandes du serveur.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.ServerCommandType.RemoveConnection">
      <summary>La commande RemoveConnection.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager">
      <summary>Implémentation <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IServerIdManager" /> par défaut.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager.ServerId">
      <summary>Obtient ou définit l'ID du serveur.</summary>
      <returns>ID du serveur.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.IJsonValue">
      <summary>Représente une valeur JSON.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.IJsonValue.CanConvertTo(System.Type)">
      <summary>Convertit la valeur de paramètre au <see cref="T:System.Type" /> spécifié.</summary>
      <returns>Valeur du paramètre converti.</returns>
      <param name="type">
        <see cref="T:System.Type" /> auquel convertir le paramètre.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.IJsonValue.ConvertTo(System.Type)">
      <summary>Convertit la valeur de paramètre au <see cref="T:System.Type" /> spécifié.</summary>
      <returns>Valeur du paramètre converti.</returns>
      <param name="type">
        <see cref="T:System.Type" /> auquel convertir le paramètre.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.IJsonWritable">
      <summary>Les implémentations gèrent leur propre sérialisation vers JSON.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.IJsonWritable.WriteJson(System.IO.TextWriter)">
      <summary>Se sérialise vers JSON via un <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> qui reçoit l’objet sérialisé au format JSON.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions">
      <summary> Extensions pour <see cref="T:Newtonsoft.Json.JsonSerializer" />. </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Parse``1(Newtonsoft.Json.JsonSerializer,System.ArraySegment{System.Byte},System.Text.Encoding)">
      <summary>Désérialise le JSON en un objet .NET.</summary>
      <returns>Objet désérialisé à partir de la chaîne JSON.</returns>
      <param name="serializer">Sérialiseur</param>
      <param name="jsonBuffer">La mémoire tampon JSON à désérialiser.</param>
      <param name="encoding">L'encodage à utiliser.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> de l’objet étant désérialisé.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Parse``1(Newtonsoft.Json.JsonSerializer,System.String)">
      <summary>Désérialise le JSON en un objet .NET.</summary>
      <returns>Objet désérialisé à partir de la chaîne JSON.</returns>
      <param name="serializer">Sérialiseur</param>
      <param name="json">JSON à désérialiser.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> de l’objet étant désérialisé.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Serialize(Newtonsoft.Json.JsonSerializer,System.Object,System.IO.TextWriter)">
      <summary>Sérialise l’objet spécifié en un <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="serializer">Le sérialiseur JSON</param>
      <param name="value">Objet à sérialiser.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> auquel sérialiser l’objet.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Stringify(Newtonsoft.Json.JsonSerializer,System.Object)">
      <summary>Sérialise l’objet spécifié en une chaîne JSON.</summary>
      <returns>Représentation de chaîne JSON de l’objet.</returns>
      <param name="serializer">Sérialiseur</param>
      <param name="value">Objet à sérialiser.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.JsonUtility">
      <summary> Classe d’assistance pour les opérations JSON courantes. </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CamelCase(System.String)">
      <summary>Convertit le nom spécifié en casse mixte</summary>
      <returns>Valeur en casse mixte du <paramref name="name" /> spécifié.</returns>
      <param name="name">Valeur à convertir.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CreateDefaultSerializer">
      <summary>Crée une instance <see cref="T:Newtonsoft.Json.JsonSerializer" /> avec le paramètre par défaut.</summary>
      <returns>Les <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> nouvellement créés.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CreateDefaultSerializerSettings">
      <summary>Crée une instance des <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> par défaut.</summary>
      <returns>Les <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> nouvellement créés.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CreateJsonpCallback(System.String,System.String)">
      <summary>Crée un rappel JSONP.</summary>
      <returns>
        <see cref="T:System.String" /> qui représente le rappel.</returns>
      <param name="callback">Rappel à créer.</param>
      <param name="payload">Charge utile.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Json.JsonUtility.JavaScriptMimeType">
      <summary>Obtient le type MIME pour Javascript.</summary>
      <returns>Type MIME pour Javascript.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Json.JsonUtility.JsonMimeType">
      <summary>Obtient le type MIME pour cet utilitaire JSON.</summary>
      <returns>Type MIME pour cet utilitaire JSON.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Command">
      <summary>Représente les commandes utilisées avec la messagerie SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Command.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.Command" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.CommandType">
      <summary>Obtient ou définit le type de commandes.</summary>
      <returns>Le type de commandes.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.Id">
      <summary>Obtient ou définit l'identificateur de commandes.</summary>
      <returns>Identificateur de commande.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.Value">
      <summary>Obtient ou définit une valeur de commande.</summary>
      <returns>La valeur de commande.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.WaitForAck">
      <summary>Obtient ou définit si la commande attend la certification avant l'exécution.</summary>
      <returns>true si la commande attend la certification avant l'exécution ; sinon, false.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.CommandType">
      <summary>Énumère les commandes pour le message de connexion.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.Abort">
      <summary />
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.AddToGroup">
      <summary />
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.Disconnect">
      <summary />
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.Initializing">
      <summary>Spécifie la commande permettant d'initialiser la connexion.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.RemoveFromGroup">
      <summary />
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.IMessageBus">
      <summary>Fournit les méthodes utilisées pour publier dans des messages et s'y abonner à partir du bus de messages SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.IMessageBus.Publish(Microsoft.AspNet.SignalR.Messaging.Message)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.IMessageBus.Subscribe(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>Abonne un abonné à une rubrique dans le bus de messages.</summary>
      <returns>L'état de l'abonnement.</returns>
      <param name="subscriber">Abonné.</param>
      <param name="cursor">Curseur de lecture qui indique qu'une action est en cours de réalisation pour l'abonnement.</param>
      <param name="callback">Fonction de rappel.</param>
      <param name="maxMessages">Taille du message dans la mémoire tampon.</param>
      <param name="state">État de l’opération d'appel.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ISubscriber">
      <summary>Fournit des détails sur l'abonné dans le bus des messages SignalR.</summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Messaging.ISubscriber.EventKeyAdded"></member>
    <member name="E:Microsoft.AspNet.SignalR.Messaging.ISubscriber.EventKeyRemoved"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.EventKeys"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.Identity"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.Subscription">
      <summary>Obtient ou définit l'abonnement.</summary>
      <returns>Abonnement.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.WriteCursor">
      <summary>Obtient ou définit le curseur d'écriture.</summary>
      <returns>Curseur d'écriture.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ISubscription">
      <summary>Fournit des méthodes pour effectuer des travaux et gérer l'état d'un abonnement.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscription.Identity">
      <summary>Obtient ou définit l'identité de cet abonnement.</summary>
      <returns>L'identité de l'abonnement.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ISubscription.SetQueued">
      <summary>Active l'abonnement.</summary>
      <returns>true si l'abonnement est activé ; sinon, false.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ISubscription.UnsetQueued">
      <summary>Interrompt l'abonnement.</summary>
      <returns>true si l'abonnement est interrompu ; sinon, false.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ISubscription.Work">
      <summary>Traite le message via cet abonnement.</summary>
      <returns>Tâche qui représente le traitement du message d'abonnement.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo">
      <summary>Aucun contenu ne sera mis à jour. N'ajoutez pas de matériel ici.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.#ctor(System.String,System.UInt64,Microsoft.AspNet.SignalR.Messaging.MessageStore{Microsoft.AspNet.SignalR.Messaging.Message})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo" />.</summary>
      <param name="key">Clé associée à l'événement local.</param>
      <param name="id">Identificateur associé à la clé spécifiée.</param>
      <param name="store">Banque d'informations associée à la clé de l'événement local.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.Id">
      <summary>Obtient ou l'identificateur de la valeur associée à la clé spécifiée.</summary>
      <returns>Identificateur associé à la clé spécifiée.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.Key">
      <summary>Obtient ou définit le chemin d'accès associé aux événements locaux.</summary>
      <returns>Clé associée à l'événement local.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.MessageStore">
      <summary>Obtient le message relatif à la clé.</summary>
      <returns>Message relatif à la clé.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Message">
      <summary>Aucun contenu ne sera mis à jour. N'ajoutez pas de matériel ici.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.Message" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.#ctor(System.String,System.String,System.ArraySegment{System.Byte})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.#ctor(System.String,System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.Message" />.</summary>
      <param name="source">Source du message.</param>
      <param name="key">Message de la clé.</param>
      <param name="value">Valeur du message.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.CommandId">
      <summary>Obtient ou définit l'identificateur de la commande du message.</summary>
      <returns>Identificateur de la commande du message.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Encoding">
      <summary>L'encodage du message.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Filter">
      <summary>Obtient ou définit le filtre du message.</summary>
      <returns>Filtre du message.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.GetString"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.IsAck">
      <summary>Obtient ou définit une valeur qui indique si le message est un message de réception.</summary>
      <returns>true si le message est un message de réception ; sinon, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.IsCommand">
      <summary>Obtient une valeur qui indique si le message est un message de commande.</summary>
      <returns>true si le message est un message de commande ; sinon, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Key">
      <summary>Obtient ou définit la clé du message.</summary>
      <returns>Clé relative au message.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.MappingId">
      <summary>Id de la charge de travail.Utilisé uniquement dans les scénarios de montée en charge (scaleout)</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.ReadFrom(System.IO.Stream)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Source">
      <summary>Obtient ou définit la source du message.</summary>
      <returns>Source du message.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.StreamIndex">
      <summary>L'index du flux d'où est venu ce message.Utilisé uniquement les scénarios de montée en charge (scaleout).</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Value">
      <summary>Obtient ou définit la valeur du message.</summary>
      <returns>Valeur du message.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.WaitForAck">
      <summary>Obtient ou définit une valeur qui indique si le message attend un accusé de réception.</summary>
      <returns>true si le message attend un accusé de réception ; sinon, false.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.WriteTo(System.IO.Stream)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker">
      <summary>Planifie les tâches à réaliser pour un abonnement spécifique et inclut un algorithme qui permet de choisir le nombre de travailleurs (threads du pool de threads) qui traitera la tâche planifiée.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.#ctor(Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker" />.</summary>
      <param name="performanceCounterManager">Le gestionnaire du compteur de performances.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Dispose(System.Boolean)">
      <summary>Libère toutes les ressources utilisées par <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker" />.</summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Schedule(Microsoft.AspNet.SignalR.Messaging.ISubscription)">
      <summary>Planifie une tâche sur l'abonnement spécifié.</summary>
      <param name="subscription">L'abonnement à planifier.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Trace">
      <summary>Obtient ou définit la source de suivi du courtier.</summary>
      <returns>La source de suivi du courtier.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageBus">
      <summary>Représente le bus de messages pour SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.#ctor(Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier,Microsoft.AspNet.SignalR.Tracing.ITraceManager,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Configuration.IConfigurationManager,System.Int32)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBus.Counters"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.CreateSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>Crée un nouvel abonnement pour l'abonné.</summary>
      <returns>Abonnement nouvellement créé.</returns>
      <param name="subscriber">L'abonné.</param>
      <param name="cursor">Le curseur de lecture qui indique le travail pour l'abonnement.</param>
      <param name="callback">Fonction de rappel.</param>
      <param name="messageBufferSize">Taille de la mémoire tampon des messages.</param>
      <param name="state">L'état de l'opération de rappel.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.CreateTopic(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Dispose"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Dispose(System.Boolean)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Publish(Microsoft.AspNet.SignalR.Messaging.Message)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Save(Microsoft.AspNet.SignalR.Messaging.Message)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.ScheduleEvent(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Subscribe(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>Établit un abonnement de rubrique pour l'abonné sur le bus de messages.</summary>
      <returns>L'état de l'abonnement.</returns>
      <param name="subscriber">L'abonné.</param>
      <param name="cursor">Le curseur de lecture qui indique le travail pour l'abonnement.</param>
      <param name="callback">Fonction de rappel.</param>
      <param name="maxMessages">Taille de la mémoire tampon des messages.</param>
      <param name="state">L'état de l'opération de rappel.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBus.Topics"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBus.Trace">
      <summary>Obtient la source de suivi utilisée pour suivre l'exécution du code.</summary>
      <returns>La source de suivi utilisée pour suivre l'exécution du code.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions">
      <summary>Fournit des méthodes d'extension au service des bus SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions.Enumerate(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Action{Microsoft.AspNet.SignalR.Messaging.Message})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions.Enumerate``1(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Func{Microsoft.AspNet.SignalR.Messaging.Message,System.Boolean},System.Action{``0,Microsoft.AspNet.SignalR.Messaging.Message},``0)">
      <summary>Dresse la liste des messages.</summary>
      <param name="messages">Liste contenant les messages.</param>
      <param name="filter">Méthode qui permet de filtrer les messages énumérés.</param>
      <param name="onMessage">Méthode qui permet de filtrer les messages énumérés.</param>
      <param name="state">Objet qui représente la fin de l'opération.</param>
      <typeparam name="T">Type du paramètre <paramref name="state" />.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions.Publish(Microsoft.AspNet.SignalR.Messaging.IMessageBus,System.String,System.String,System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageResult">
      <summary>Représente le résultat d'un message.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageResult.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageResult" />.</summary>
      <param name="terminal">true s'il s'agit du résultat d'un message terminal ; sinon, false.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageResult.#ctor(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageResult" />.</summary>
      <param name="messages">Tableau de messages associé à ce <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageResult" />.</param>
      <param name="totalCount">Nombre de messages inclus dans le tableau de messages.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageResult.Messages">
      <summary>Obtient une <see cref="T:System.Collections.Generic.IList`1" /> associée au résultat.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> associée au résultat.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageResult.Terminal">
      <summary>Obtient ou définit une valeur qui indique s'il s'agit du résultat d'un message terminal.</summary>
      <returns>true s'il s'agit d'un message terminal ; sinon, false.</returns>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.MessageResult.TerminalMessage">
      <summary>Indique s'il s'agit du résultat d'un message terminal.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageResult.TotalCount">
      <summary>Obtient ou définit le nombre de messages inclus dans le tableau de messages.</summary>
      <returns>Nombre de messages inclus dans le tableau de messages.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageStore`1">
      <summary>Représente une banque de messages stockée par une mémoire tampon en anneau.</summary>
      <typeparam name="T">Type des éléments de la banque.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.#ctor(System.UInt32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageStore`1" /> avec la capacité spécifiée.</summary>
      <param name="capacity">Capacité minimale de la banque.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.#ctor(System.UInt32,System.UInt32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageStore`1" />.</summary>
      <param name="capacity">Capacité minimale de la banque.</param>
      <param name="offset">Décalage du premier message dans la banque.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.Add(`0)">
      <summary>Ajoute un message à la banque et retourne l'ID du message ajouté.</summary>
      <returns>ID du message ajouté.</returns>
      <param name="message">Message à ajouter.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.GetMessageCount">
      <summary>Obtient le nombre de messages de la banque.</summary>
      <returns>Nombre de messages de la banque.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.GetMessages(System.UInt64,System.Int32)">
      <summary>Obtient le lot de messages suivant, commençant par l'ID spécifié. </summary>
      <returns>Lot de messages suivant.</returns>
      <param name="firstMessageId">ID du permier message.</param>
      <param name="maxMessages">Nombre de messages maximal à retourner.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1">
      <summary>Représente le résultat associé à la banque de messages.</summary>
      <typeparam name="T">Type de résultat.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.#ctor(System.UInt64,System.ArraySegment{`0},System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1" />.</summary>
      <param name="firstMessageId">L'identificateur du premier message.</param>
      <param name="messages">Le message associé au résultat.</param>
      <param name="hasMoreData">true si le résultat contient plus de données ; sinon, false.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.FirstMessageId">
      <summary>Obtient l'identificateur du premier message.</summary>
      <returns>L'identificateur du premier message.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.HasMoreData">
      <summary>Obtient si le résultat contient plus de données.</summary>
      <returns>true si le résultat contient plus de données ; sinon, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.Messages">
      <summary>Obtient le message associé au résultat.</summary>
      <returns>Le message associé au résultat.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration">
      <summary>Représente les paramètres courants pour les implémentations de bus de messages de montée en charge (scale-out).</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration" />.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration.DisableQueuing">
      <summary>La mise en file d'attente est actuellement désactivée.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration.MaxQueueLength">
      <summary>Obtient ou définit la longueur maximale de la file d'attente d'envoi sortante.</summary>
      <returns>La longueur maximale de la file d'attente d'envoi sortante.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping">
      <summary>Aucun contenu ne sera mis à jour. N'ajoutez pas de matériel ici.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.#ctor(System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.#ctor(System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo})"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.Id"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.LocalKeyInfo"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.ServerCreationTime"></member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore">
      <summary>Represents a scale out mapping store on SignalR messaging.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore" /> class.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.Add(System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo})">
      <summary>Adds a new scaleout mapping store.</summary>
      <param name="id">The identifier.</param>
      <param name="message">The message.</param>
      <param name="localKeyInfo">The local key information.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.GetEnumerator(System.UInt64)">
      <summary>Gets the enumerator for the mapping store.</summary>
      <returns>The enumerator for the mapping store.</returns>
      <param name="id">The identifier.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.MaxMapping">
      <summary>Gets the maximum numbers of mapping for this instance.</summary>
      <returns>The maximum numbers of mapping for this instance.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage">
      <summary>Represents a message to the scaleout backplane.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> class.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.#ctor(System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.Message})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> class.</summary>
      <param name="messages">The messages from SignalR.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.FromBytes(System.Byte[])">
      <summary>Creates a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> class from the specified data in bytes.</summary>
      <returns>The created instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" />.</returns>
      <param name="data">The data in bytes.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.Messages">
      <summary>Gets or sets the messages from SignalR.</summary>
      <returns>The messages from SignalR.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.ServerCreationTime">
      <summary>Gets or sets the time the message was created on the origin server.</summary>
      <returns>The time the message was created on the origin server.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.ToBytes">
      <summary>Converts a <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> object to bytes.</summary>
      <returns>The converted <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> object to bytes.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus">
      <summary>Représente une classe de base courante pour les implémentations de la montée en puissance du bus de messages.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver,Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Close(System.Int32)">
      <param name="streamIndex">Index du flux à fermer.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.CreateSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Dispose(System.Boolean)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.OnError(System.Int32,System.Exception)">
      <summary>Ferme la file d'attente spécifiée pour l'envoi des messages ce qui fait échouer tous les envois de manière asynchrone.</summary>
      <param name="streamIndex">Index du flux à fermer.</param>
      <param name="exception">L'erreur qui s'est produite.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.OnReceived(System.Int32,System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage)">
      <summary>Invoquée lorsqu’une charge de travail est reçue de l’infrastructure d’intégration.Un seul appel doit être actif à la fois.</summary>
      <param name="streamIndex">Identifiant du flux.</param>
      <param name="id">Identifiant de la charge de travail au sein de ce flux.</param>
      <param name="message">Message de montée en charge.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Open(System.Int32)">
      <param name="streamIndex">Index du flux à ouvrir.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Publish(Microsoft.AspNet.SignalR.Messaging.Message)">
      <summary>Publie un message à partir de la montée en puissance du bus de messages.</summary>
      <returns>Tâche qui représente l'opération visant à publier un message.</returns>
      <param name="message">Message à publier.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Send(System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.Message})">
      <summary>Envoie les messages à partir de la montée en puissance du bus des messages SignalR.</summary>
      <returns>Tâche qui représente l'opération visant à envoyer un message.</returns>
      <param name="messages">Messages à envoyer.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Send(System.Int32,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.Message})"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.StreamCount">
      <summary>Le nombre de flux qui ne peuvent pas changer la durée de vie de cette instance.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore">
      <summary>Represents a message store that is backed by a ring buffer.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore" /> class.</summary>
      <param name="capacity">The minimum capacity of the store.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.Add(Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping)">
      <summary>Adds a message to the store and returns the ID of the newly added message.</summary>
      <returns>The ID of the newly added message.</returns>
      <param name="mapping">The mapping used in the store.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.FragmentCount">
      <summary>Gets or sets the number of message fragments in the store.</summary>
      <returns>The number of message fragments.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.FragmentSize">
      <summary>Gets or sets the size of the message fragment.</summary>
      <returns>The size of the message fragment.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.GetMessages(System.UInt64)">
      <summary>Gets the next batch of messages, beginning with the specified ID. </summary>
      <returns>The next batch of messages.</returns>
      <param name="firstMessageIdRequestedByClient">The first message ID requested by the client.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.GetMessagesByMappingId(System.UInt64)">
      <summary>Gets the next batch of messages for the specified mapping ID.</summary>
      <returns>The next batch of messages.</returns>
      <param name="mappingId">The mapping ID.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.MaxMapping">
      <summary>Gets or sets the maximum mapping ID.</summary>
      <returns>The maximum mapping ID.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription">
      <summary>Représente un abonnement évolutif.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.#ctor(System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore},System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription" />.</summary>
      <param name="identity">Identité de l'abonnement.</param>
      <param name="eventKeys">Clés d'événement pour l'abonnement.</param>
      <param name="cursor">Curseur d'écriture.</param>
      <param name="streams">Flux employés pour associer les curseurs d'écriture.</param>
      <param name="callback">Fonction de rappel qui s'exécute lorsque l'abonnement change d'état.</param>
      <param name="maxMessages">Nombre maximum de messages attribués à cet abonnement.</param>
      <param name="counters">Objet employé pour accéder aux compteurs de performances de l'abonnement.</param>
      <param name="state">L'état de l'abonnement.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.BeforeInvoke(System.Object)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.PerformWork(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Int32@,System.Object@)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.WriteCursor(System.IO.TextWriter)">
      <summary>Enregistre le curseur à l'aide du TextWriter spécifié.</summary>
      <param name="textWriter">TextWriter employé pour enregistrer le curseur.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Subscription">
      <summary>Représente une implémentation de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.ISubscription" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.Subscription" />.</summary>
      <param name="identity">L'identité de l'abonnement.</param>
      <param name="eventKeys">Liste comprenant les clés d'événement pour l'abonnement.</param>
      <param name="callback">Fonction de rappel qui s'exécute lorsque l'abonnement change d'état.</param>
      <param name="maxMessages">Nombre maximum de messages attribués à cet abonnement.</param>
      <param name="counters">Objet employé pour accéder aux compteurs de performances de l'abonnement.</param>
      <param name="state">L'état de l'abonnement.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.AddEvent(System.String,Microsoft.AspNet.SignalR.Messaging.Topic)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.BeforeInvoke(System.Object)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.Disposable">
      <summary>Obtient ou définit la méthode utilisée pour supprimer les ressources de l'abonnement.</summary>
      <returns>Méthode utilisée pour supprimer les ressources de l'abonnement.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Dispose"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Dispose(System.Boolean)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.EventKeys"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.Identity"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Invoke(Microsoft.AspNet.SignalR.Messaging.MessageResult)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.MaxMessages"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.PerformWork(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Int32@,System.Object@)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.RemoveEvent(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.SetEventTopic(System.String,Microsoft.AspNet.SignalR.Messaging.Topic)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.SetQueued"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.UnsetQueued"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Work"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.WriteCursor(System.IO.TextWriter)">
      <summary>Enregistre le curseur à l'aide du TextWriter spécifié.</summary>
      <param name="textWriter">TextWriter employé pour enregistrer le curseur.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Topic">
      <summary>Représente la rubrique sur le bus de messages SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.#ctor(System.UInt32,System.TimeSpan)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.Topic" />.</summary>
      <param name="storeSize">Taille de la banque de messages.</param>
      <param name="lifespan">Durée de vie de la rubrique.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.AddSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscription)">
      <summary>Ajoute l'abonnement spécifié à la liste.</summary>
      <param name="subscription">Abonnement à ajouter.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.IsExpired">
      <summary>Obtient une valeur qui indique si la rubrique a expiré.</summary>
      <returns>true si la rubrique a expiré ; sinon, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.LastUsed">
      <summary>Obtient ou définit l'heure à laquelle l'abonnement a été utilisé pour la dernière fois.</summary>
      <returns>Heure à laquelle l'abonnement a été utilisé pour la dernière fois.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.MarkUsed"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.RemoveSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscription)">
      <summary>Supprime l'abonnement spécifié de la liste.</summary>
      <param name="subscription">Abonnement à supprimer.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.Store">
      <summary>Obtient ou définit la banque de messages.</summary>
      <returns>Banque de messages.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.SubscriptionLock">
      <summary>Obtient ou définit l'objet utilisé pour verrouiller la rubrique.</summary>
      <returns>Objet utilisé pour verrouiller la rubrique.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.Subscriptions">
      <summary>Obtient ou définit la liste contenant les abonnements à la rubrique.</summary>
      <returns>Liste contenant les abonnements à la rubrique.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.TopicLookup">
      <summary>Représente une collection de rubriques utilisée en tant que recherche.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Messaging.TopicLookup" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.Clear">
      <summary>Supprime toutes les rubriques de la collection.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.ContainsKey(System.String)">
      <summary>Détermine si la rubrique avec la clé spécifiée est contenue dans la collection.</summary>
      <returns>true si la rubrique avec la clé spécifiée est contenue dans la collection ; sinon, false.</returns>
      <param name="key">Clé de la rubrique.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.TopicLookup.Count">
      <summary>Obtient le nombre total de rubriques (générales et groupées) de la collection.</summary>
      <returns>Nombre total de rubriques (générales et groupées) de la collection.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.GetEnumerator">
      <summary>Obtient l'énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d'itérer au sein de la collection.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.GetOrAdd(System.String,System.Func{System.String,Microsoft.AspNet.SignalR.Messaging.Topic})">
      <summary>Ajoute une rubrique à la collection à l'aide de la fonction spécifiée, si la clé n'existe pas encore.</summary>
      <returns>Rubrique générée pour la clé spécifiée.</returns>
      <param name="key">Clé de la rubrique à ajouter.</param>
      <param name="factory">Fonction servant à générer la rubrique pour la clé.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.TopicLookup.Item(System.String)">
      <summary>Obtient la rubrique avec la clé spécifiée.</summary>
      <returns>Rubrique avec la clé spécifiée, si celle-ci est trouvée ; sinon, null.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.System#Collections#IEnumerable#GetEnumerator">
      <summary>Obtient l'énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d'itérer au sein de la collection.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.TryGetValue(System.String,Microsoft.AspNet.SignalR.Messaging.Topic@)">
      <summary>Tente d'obtenir la rubrique avec la clé spécifiée de la collection.</summary>
      <returns>true si la clé a été trouvée ; sinon, false.</returns>
      <param name="key">Clé à obtenir.</param>
      <param name="topic">Lorsque cette méthode est retournée, elle contient la rubrique récupérée.Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.TryRemove(System.String)">
      <summary>Tente de supprimer et de renvoyer la rubrique avec la clé spécifiée de la collection.</summary>
      <returns>Rubrique supprimée.</returns>
      <param name="key">Clé de la rubrique à supprimer.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.ServerRequest">
      <summary>Représente une requête émanant du serveur.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerRequest.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Owin.ServerRequest" />.</summary>
      <param name="environment">L'environnement.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Cookies">
      <summary>Obtient les cookies associés au serveur.</summary>
      <returns>Cookies associés au serveur.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Environment"></member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Headers">
      <summary>Obtient les en-têtes associés à la demande.</summary>
      <returns>En-têtes associés à la demande.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.LocalPath"></member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.QueryString">
      <summary>Obtient la collection des variables de chaîne de la requête du serveur.</summary>
      <returns>Collection des variables de chaîne de la requête HTTP.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerRequest.ReadForm"></member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Url">
      <summary>Obtient les informations sur l'URL relative à la requête active.</summary>
      <returns>Objet <see cref="T:System.Uri" /> contenant des informations relatives à l'URL de la requête active.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.User">
      <summary>Obtient l'utilisateur de ce serveur.</summary>
      <returns>Utilisateur du serveur.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.ServerResponse">
      <summary>Représente la rétroaction du serveur en réponse à la demande.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerResponse.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Owin.ServerResponse" />.</summary>
      <param name="environment">L'environnement.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerResponse.CancellationToken">
      <summary>Obtient l'annulation des jetons associés à la réponse.</summary>
      <returns>Jeton d'annulation associé à la réponse.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerResponse.ContentType">
      <summary>Obtient ou définit le type de contenu associé à la réponse.</summary>
      <returns>Type de contenu associé à la réponse.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerResponse.Flush">
      <summary>Vide cette instance.</summary>
      <returns>L'instance vidée.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerResponse.Write(System.ArraySegment{System.Byte})">
      <summary>Écrit une réponse à l'aide du segment de tableau associé.</summary>
      <param name="data">Le segment de tableau.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.Middleware.HubDispatcherMiddleware">
      <summary>Represents the middleware used by the hub dispatcher.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.HubDispatcherMiddleware.#ctor(Microsoft.Owin.OwinMiddleware,Microsoft.AspNet.SignalR.HubConfiguration)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.HubDispatcherMiddleware.Invoke(Microsoft.Owin.IOwinContext)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.Middleware.PersistentConnectionMiddleware">
      <summary>Représente l'intergiciel de la connexion persistante.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.PersistentConnectionMiddleware.#ctor(Microsoft.Owin.OwinMiddleware,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.PersistentConnectionMiddleware.Invoke(Microsoft.Owin.IOwinContext)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Tracing.ITraceManager">
      <summary>Représente une interface qui fournit les propriétés permettant de suivre l'exécution du code.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.ITraceManager.Item(System.String)">
      <summary>Obtient la <see cref="T:System.Diagnostics.TraceSource" /> avec le nom spécifié de la source.</summary>
      <returns>La <see cref="T:System.Diagnostics.TraceSource" /> avec le nom spécifié de la source.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.ITraceManager.Switch">
      <summary>Obtient le commutateur qui contrôle le suivi de l'exécution du code et le résultat du débogage.</summary>
      <returns>Objet <see cref="T:System.Diagnostics.SourceSwitch" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Tracing.TraceManager">
      <summary>Fournit les propriétés qui vous permettent de suivre l'exécution du code.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Tracing.TraceManager.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Tracing.TraceManager" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Tracing.TraceManager.#ctor(System.Diagnostics.TextWriterTraceListener)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.TraceManager.Item(System.String)">
      <summary>Obtient la <see cref="T:System.Diagnostics.TraceSource" /> avec le nom spécifié de la source.</summary>
      <returns>La <see cref="T:System.Diagnostics.TraceSource" /> avec le nom spécifié de la source.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.TraceManager.Switch">
      <summary>Obtient le commutateur qui contrôle le suivi de l'exécution du code et le résultat du débogage.</summary>
      <returns>Objet <see cref="T:System.Diagnostics.SourceSwitch" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport">
      <summary>Représente un transport de type FFT (Forever Frame Transport).</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport" />.</summary>
      <param name="context">Contexte de l'hôte.</param>
      <param name="resolver">Programme de résolution des dépendances.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.InitializeResponse(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Initialise l'objet de réponse.</summary>
      <returns>La <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération d'initialisation de réponse.</returns>
      <param name="connection">La connexion de transport.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.KeepAlive">
      <summary>Conserve la connexion active.</summary>
      <returns>La <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération Conserver Actif.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.OutputWriter">
      <summary>Obtient le TextWriter HTML qui écrit la réponse de contexte dans le flux de sortie.</summary>
      <returns>Le TextWriter HTML qui écrit la réponse de contexte dans le flux de sortie.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>Envoie la réponse de contexte spécifiée.</summary>
      <returns>La <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération d'envoi.</returns>
      <param name="response">Message à envoyer.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport">
      <summary>Aucun contenu ne sera mis à jour. N'ajoutez pas de matériel ici.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" />.</summary>
      <param name="context">Contexte de l'hôte.</param>
      <param name="resolver">Programme de résolution des dépendances.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Newtonsoft.Json.JsonSerializer,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" />.</summary>
      <param name="context">Contexte de l'hôte.</param>
      <param name="jsonSerializer">Sérialiseur JSON.</param>
      <param name="heartbeat">Pulsations dans le transport.</param>
      <param name="performanceCounterWriter">L'enregistreur du compteur de performances.</param>
      <param name="traceManager">Gestionnaire de traces.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Connected">
      <summary>Obtient ou définit la fonction de connexion pour <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" />.</summary>
      <returns>La fonction de connexion pour le <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.EnqueueOperation(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)">
      <summary>Effectue une mise en file d'attente pour les transports.</summary>
      <returns>Mise en file d'attente pour les transports.</returns>
      <param name="writeAsync">Écriture asynchrone.</param>
      <param name="state">Objet d'état.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.InitializePersistentState">
      <summary>Initialise l'état persistant pour le transport constant.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.InitializeResponse(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Initialise la réponse de connexion pour le transport constant.</summary>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="connection">La connexion de transport.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.JsonSerializer">
      <summary>Obtient le sérialiseur JSON pour le transport constant.</summary>
      <returns>Sérialiseur JSON pour le transport constant.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.LastMessageId">
      <summary>Obtient l'ID du dernier message pour le transport constant.</summary>
      <returns>ID du dernier message pour le transport constant.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.OnSending(System.String)">
      <summary>Fournit la charge utile pour envoyer un transport.</summary>
      <param name="payload">Charge utile de la chaîne.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.OnSendingResponse(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>Fournit une réponse pour les méthodes de transfert.</summary>
      <param name="response">Réponse à une connexion.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Fournit une connexion pour traiter la requête.</summary>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="connection">La connexion de transport.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.ProcessRequestCore(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Fournit une requête pour traiter la connexion pour le transport.</summary>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="connection">La connexion de transport.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Received">
      <summary>Obtient ou définit une fonction à recevoir pour le transport constant.</summary>
      <returns>Fonction à recevoir pour le transport constant.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Reconnected">
      <summary>Obtient ou définit la fonction reconnectée pour le transport constant.</summary>
      <returns>Fonction reconnectée pour le transport constant.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>Envoie une réponse à une connexion pour le transport constant.</summary>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="response">La réponse persistante.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Send(System.Object)">
      <summary>Envoie un objet au transport constant.</summary>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="value">Valeur à envoyer.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.TransportConnected">
      <summary>Obtient ou définit le transport connecté pour le <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" />.</summary>
      <returns>Transport connecté pour le <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITrackingConnection">
      <summary> Représente une connexion pouvant être suivie par une <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat" />. </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.ApplyState(Microsoft.AspNet.SignalR.Transports.TransportConnectionStates)">
      <summary> Applique un nouvel état à la connexion. </summary>
      <param name="states">Une des valeurs de l'énumération <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates" />.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.CancellationToken"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.ConnectionId"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.ConnectTask"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.Disconnect"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.DisconnectThreshold"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.End"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.IsAlive"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.IsTimedOut"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.KeepAlive"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.SupportsKeepAlive"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.Timeout"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.Url"></member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransport">
      <summary>Représente un transport qui communique.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Connected">
      <summary>Obtient ou définit un rappel appelé lorsque la connexion initiale se connecte au transport.</summary>
      <returns>Retourne <see cref="T:System.Func`1" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.ConnectionId">
      <summary>Obtient ou définit l'ID de connexion pour le transport.</summary>
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Disconnected">
      <summary>Obtient ou définit un rappel appelé lorsque le transport se déconnecte.</summary>
      <returns>Retourne <see cref="T:System.Func`1" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Traite la <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" /> spécifiée pour ce transport.</summary>
      <returns>Une <see cref="T:System.Threading.Tasks.Task" /> se terminant lorsque le transport a fini de traiter la connexion.</returns>
      <param name="connection">
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" /> à traiter.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Received">
      <summary>Obtient ou définit un rappel appelé lorsque le transport reçoit des données.</summary>
      <returns>Retourne <see cref="T:System.Func`2" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Reconnected">
      <summary>Obtient ou définit un rappel appelé lorsque le transport se reconnecte.</summary>
      <returns>Retourne <see cref="T:System.Func`1" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransport.Send(System.Object)">
      <summary>Envoie des données sur le transport.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> qui se termine lorsque l’envoi est complet.</returns>
      <param name="value">Valeur à envoyer.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.TransportConnected">
      <summary>Obtient ou définit un rappel appelé lorsque le transport se connecte.</summary>
      <returns>Retourne <see cref="T:System.Func`1" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection">
      <summary>Représente le transport de connexion.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportConnection.Receive(System.String,System.Func{Microsoft.AspNet.SignalR.Transports.PersistentResponse,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>Reçoit les données d'abonnement du transport.</summary>
      <returns>Données d'abonnement du transport.</returns>
      <param name="messageId">ID du message pour l'abonnement.</param>
      <param name="callback">Méthode permettant de gérer le message reçu.</param>
      <param name="maxMessages">Taille du message dans la mémoire tampon.</param>
      <param name="state">L'état de la connexion de transport.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportConnection.Send(Microsoft.AspNet.SignalR.ConnectionMessage)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat">
      <summary>Gère le suivi de l’état des connexions.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.AddOrUpdateConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>Ajoute une nouvelle connexion à la liste des connexions suivies.</summary>
      <returns>Connexion remplacée, le cas échéant.</returns>
      <param name="connection">Connexions à ajouter.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.GetConnections">
      <summary>Obtient une liste des connexions suivies.</summary>
      <returns>Liste de connexions.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.MarkConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>Marque une connexion existante comme active.</summary>
      <param name="connection">Connexion à marquer.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.RemoveConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>Supprime une connexion de la liste des connexions suivies.</summary>
      <param name="connection">Connexion à supprimer.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransportManager">
      <summary>Gère le transport pour les connexions.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportManager.GetTransport(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>Obtient le transport spécifié pour le <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> spécifié.</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransport" /> pour le <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> spécifié.</returns>
      <param name="hostContext">
        <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> de la requête actuelle.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportManager.SupportsTransport(System.String)">
      <summary>Indique si le transport spécifié est pris en charge.</summary>
      <returns>La valeur est True si le transport est pris en charge, sinon False.</returns>
      <param name="transportName">Nom du transport à tester.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.LongPollingTransport">
      <summary>Aucun contenu ne sera mis à jour. N'ajoutez pas de matériel ici.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Transports.LongPollingTransport" />.</summary>
      <param name="context">Contexte de l'hôte.</param>
      <param name="resolver">Programme de résolution des dépendances.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Newtonsoft.Json.JsonSerializer,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager,Microsoft.AspNet.SignalR.Configuration.IConfigurationManager)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Connected">
      <summary>Obtient ou définit la fonction connectée.</summary>
      <returns>Fonction connectée.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.DisconnectThreshold">
      <summary>Obtient le seuil de déconnexion.</summary>
      <returns>Seuil de déconnexion.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.IsConnectRequest">
      <summary>Obtient une valeur qui indique si le transport est une demande de connexion.</summary>
      <returns>true si le transport est une demande de connexion ; sinon, false.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Traitement de la demande de connexion.</summary>
      <returns>Tâche qui représente le traitement de la demande.</returns>
      <param name="connection">Connexion à traiter.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Received">
      <summary>Obtient ou définit la fonction reçue.</summary>
      <returns>Fonction reçue.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Reconnected">
      <summary>Obtient ou définit le transport reconnecté.</summary>
      <returns>Tâche qui reconnecte le transport.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>Envoie une réponse au transport.</summary>
      <returns>Tâche qui représente l'opération visant à envoyer une réponse.</returns>
      <param name="response">Message à envoyer.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Send(System.Object)">
      <summary>Envoie un transport d'interrogation longue avec une valeur déterminée.</summary>
      <returns>Tâche qui représente l'opération visant à envoyer un transport d'interrogation longue.</returns>
      <param name="value">Valeur.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.SupportsKeepAlive">
      <summary>Obtient une valeur qui indique si le transport peut rester actif.</summary>
      <returns>true si le transport prend en charge Keep alive ; sinon, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.TransportConnected">
      <summary>Obtient ou définit le transport connecté.</summary>
      <returns>Tâche qui connecte le transport.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse">
      <summary> Représente une réponse à une connexion. </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.PersistentResponse.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.PersistentResponse.#ctor(System.Func{Microsoft.AspNet.SignalR.Messaging.Message,System.Boolean},System.Action{System.IO.TextWriter})">
      <summary>Crée une instance de la <see cref="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse" />.</summary>
      <param name="exclude">Filtre qui détermine si les messages doivent être écrits au client.</param>
      <param name="writeCursor">Writer de curseur.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Aborted">
      <summary>Obtient ou définit une valeur qui indique si la fermeture de la connexion a été forcée.</summary>
      <returns>true si la fermeture de la connexion a été forcée ; sinon, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Disconnect">
      <summary>Obtient ou définit une valeur qui indique si la connexion reçoit une commande de déconnexion.</summary>
      <returns>true si la connexion reçoit une commande de déconnexion ; sinon, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.GroupsToken">
      <summary>Obtient ou définit un jeton signé représentant la liste des groupes.</summary>
      <returns>Groupes de jetons.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Initializing">
      <summary>True si la connexion est en cours d'initialisation</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.LongPollDelay">
      <summary>Obtient ou définit le délai d'attente du client de l'interrogation longue avant de rétablir une connexion si aucune donnée n'est reçue.</summary>
      <returns>Temps d’attente du client de l’interrogation longue avant de rétablir une connexion si aucune donnée n’est reçue.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Messages">
      <summary>Obtient ou définit la liste des messages à envoyer à la connexion de réception.</summary>
      <returns>La liste des messages à envoyer à la connexion de réception.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Microsoft#AspNet#SignalR#Json#IJsonWritable#WriteJson(System.IO.TextWriter)">
      <summary>Sérialise uniquement les composants nécessaires de la <see cref="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse" /> vers JSON à l'aide du JsonTextWriter de Json.NET pour améliorer les performances.</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> qui reçoit la sérialisation JSON.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Reconnect">
      <summary>True si le client doit tenter une reconnexion.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Terminal"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.TotalCount">
      <summary>Obtient ou définit le nombre total de messages envoyés à la connexion de réception.</summary>
      <returns>Nombre total de messages envoyés à la connexion de réception.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport">
      <summary>Fournit le transport pour envoyer des événements à partir du serveur du SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport" />.</summary>
      <param name="context">Contexte de l'hôte.</param>
      <param name="resolver">Résolveur IDependency.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.InitializeResponse(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Initialise une réponse à la <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" />.</summary>
      <returns>La réponse initialisée à la <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" />.</returns>
      <param name="connection">L'initialisation de la connexion de transport.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.KeepAlive">
      <summary>Retourne une méthode Conserver Actif pour rendre une connexion persistante pour la ressource Internet.</summary>
      <returns>Méthode Conserver Actif pour rendre une connexion persistante pour la ressource Internet.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>Envoie une réponse persistante au <see cref="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport" />.</summary>
      <returns>Une réponse persistante à envoyer au <see cref="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport" />.</returns>
      <param name="response">La réponse persistante.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates">
      <summary>Énumère l'attribut de TransportConnectionState.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Aborted">
      <summary>La connexion abandonnée de l'état.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Added">
      <summary>La connexion ajoutée de l'état.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Disconnected">
      <summary>La connexion déconnectée de l'état.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.DisconnectMessageReceived">
      <summary>Le message de déconnexion reçu de l'état.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Disposed">
      <summary>La connexion supprimée de l'état.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.HttpRequestEnded">
      <summary>La requête HTTP a pris fin avec l'état de la connexion.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.None">
      <summary>L'état sans connexion.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.QueueDrained">
      <summary>La file d'attente purgée de l'état de la connexion.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Removed">
      <summary>La connexion supprimée de l'état.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Replaced">
      <summary>La connexion remplacée de l'état.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase">
      <summary>Aucun contenu ne sera mis à jour. N'ajoutez pas de matériel ici.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" />.</summary>
      <param name="context">Contexte de l'hôte.</param>
      <param name="heartbeat">Pulsations dans le transport.</param>
      <param name="performanceCounterManager">Le gestionnaire du compteur de performances.</param>
      <param name="traceManager">Gestionnaire de traces.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Abort">
      <summary>Annule le traitement de la tâche en cours pour <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" />.</summary>
      <returns>Traitement de tâche en cours à annuler pour <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Abort(System.Boolean)">
      <summary>Annule le traitement de la tâche en cours pour <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" />.</summary>
      <returns>Traitement de tâche en cours à annuler pour <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" />.</returns>
      <param name="clean">Indique s'il faut nettoyer toutes les tâches dans le processus annulé.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ApplyState(Microsoft.AspNet.SignalR.Transports.TransportConnectionStates)">
      <summary>Applique l'état de la connexion de transport à la base de connexion.</summary>
      <param name="states">États de la connexion de transport.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.CancellationToken">
      <summary>Obtient un jeton d'annulation représentant la durée de vie de la connexion.</summary>
      <returns>Jeton d'annulation représentant la durée de vie de la connexion.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Connection">
      <summary>Obtient ou définit la connexion de transport pour la base de déconnexion de transport.</summary>
      <returns>Connexion de transport pour la base de déconnexion de transport.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ConnectionEndToken">
      <summary>Amène la connexion à mettre fin à l'opération pour ce jeton.</summary>
      <returns>Connexion qui met fin à l'opération pour ce jeton.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ConnectionId">
      <summary>Obtient ou définit l'ID de la connexion.</summary>
      <returns>Chaîne contenant l'ID de la connexion.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ConnectTask"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Context">
      <summary>Obtient le contexte d'hôte associé à la base de déconnexion de transport.</summary>
      <returns>Contexte d'hôte associé à la base de déconnexion de transport.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.CreateResponseWriter">
      <summary>Représente un enregistreur pour créer une réponse à la base de déconnexion de transport.</summary>
      <returns>Enregistreur pour créer une réponse à la base de déconnexion de transport.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Disconnect">
      <summary>Déconnecte la connexion.</summary>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Disconnected">
      <summary>Obtient ou définit la propriété déconnectée pour les connexions de transport.</summary>
      <returns>Propriété déconnectée pour les connexions de transport.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.DisconnectThreshold">
      <summary>Obtient le laps de temps nécessaire pour attendre la fin de la connexion lorsque vous y mettez fin.</summary>
      <returns>Retourne <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Dispose">
      <summary>Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par la classe <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">true pour libérer à la fois les ressources gérées et non gérées ; false pour ne libérer que les ressources non gérées.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.End">
      <summary>Arrête la connexion.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.EnqueueOperation(System.Func{System.Threading.Tasks.Task})">
      <summary>Représente l'objet qui met fin à l'opération dans la file d'attente.</summary>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="writeAsync">Écriture asynchrone.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.EnqueueOperation(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)">
      <summary>Représente l'objet qui met fin à l'opération dans la file d'attente.</summary>
      <returns>Objet qui représente la fin de l'opération sur la file d'attente.</returns>
      <param name="writeAsync">Écriture asynchrone.</param>
      <param name="state">État.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Heartbeat">
      <summary>Obtient les pulsations de transport pour gérer le suivi de l'état des connexions.</summary>
      <returns>Pulsations de transport pour gérer le suivi de l'état des connexions.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.HostShutdownToken"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IncrementErrors">
      <summary>Incrémente les erreurs dans la base de déconnexion de transport.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.InitializePersistentState">
      <summary>Initialisation de l'état persistant de la base de déconnexion de transport.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsAbortRequest">
      <summary>Obtient une valeur qui représente une demande d'annulation de la connexion.</summary>
      <returns>true si la connexion fait l'objet d'une requête en annulation ; sinon, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsAlive">
      <summary>Obtient une valeur indiquant si la connexion est active.</summary>
      <returns>true si la connexion est active ; sinon, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsConnectRequest">
      <summary>Obtient une valeur indiquant si les connexions ont fait l'objet d'une requête.</summary>
      <returns>true si la connexion fait l'objet d'une requête ; sinon, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsTimedOut">
      <summary>Obtient une valeur indiquant si la connexion a expiré.</summary>
      <returns>true si la connexion a expiré ; sinon, false.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.KeepAlive">
      <summary>Envoie un ping Conserver Actif sur la connexion.</summary>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.OutputWriter">
      <summary>Demande au générateur de sortie qui peut écrire une série de caractères séquentielle.</summary>
      <returns>Générateur de sortie qui peut écrire une série de caractères séquentielle.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.SupportsKeepAlive">
      <summary>Obtient une valeur indiquant si le transport prend en charge la fonction Conserver Actif.</summary>
      <returns>true si le transport prend en charge Keep alive ; sinon, false.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Timeout">
      <summary>Entraine l’expiration de la connexion.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Trace">
      <summary>Obtient la source pour suivre l'exécution du code et attribuer les messages de trace à leur source.</summary>
      <returns>Source pour suivre l'exécution du code et attribuer les messages de trace à leur source.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Url">
      <summary>Obtient l’URI de la connexion.</summary>
      <returns>URI de la connexion.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat">
      <summary>Représente l'implémentation par défaut d'un <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat" />.</summary>
      <param name="resolver">
        <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.AddOrUpdateConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>Ajoute une nouvelle connexion à la liste des connexions suivies.</summary>
      <param name="connection">Connexions à ajouter.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.Dispose">
      <summary>Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par la classe <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">true pour libérer à la fois les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.GetConnections">
      <summary>Obtient une liste des connexions suivies.</summary>
      <returns>Liste de connexions.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.MarkConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>Marque une connexion existante comme active.</summary>
      <param name="connection">Connexion à marquer.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.RemoveConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>Supprime une connexion de la liste des connexions suivies.</summary>
      <param name="connection">Connexion à supprimer.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportManager">
      <summary>Implémentation <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportManager" /> par défaut.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportManager" />.</summary>
      <param name="resolver">
        <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" /> par défaut.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.GetTransport(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>Obtient le transport spécifié pour le <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> spécifié.</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransport" /> pour le <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> spécifié.</returns>
      <param name="hostContext">
        <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> de la requête actuelle.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.Register(System.String,System.Func{Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.Transports.ITransport})">
      <summary>Ajout un transport à la liste des transports pris en charge.</summary>
      <param name="transportName">Transport spécifié.</param>
      <param name="transportFactory">Méthode de fabrique pour le transport spécifié.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.Remove(System.String)">
      <summary>Supprime un transport de la liste des transports pris en charge.</summary>
      <param name="transportName">Transport spécifié.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.SupportsTransport(System.String)">
      <summary>Indique si le transport spécifié est pris en charge.</summary>
      <returns>La valeur est True si le transport est pris en charge, sinon False.</returns>
      <param name="transportName">Nom du transport à tester.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.WebSocketTransport">
      <summary>Aucun contenu ne sera mis à jour. N'ajoutez pas de matériel ici.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.AspNet.SignalR.Transports.WebSocketTransport" />.</summary>
      <param name="context">Contexte de l'hôte.</param>
      <param name="resolver">Programme de résolution des dépendances.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Newtonsoft.Json.JsonSerializer,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.CancellationToken">
      <summary>Obtient le jeton d'annulation employé pour le transport.</summary>
      <returns>Jeton d'annulation employé pour le transport.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.CreateResponseWriter"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.IsAlive">
      <summary>Obtient une valeur qui indique si le transport est actif.</summary>
      <returns>true si le transport est actif ; sinon, false.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.KeepAlive">
      <summary>Conserve le transport actif.</summary>
      <returns>Tâche qui conserve le transport actif.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Traite une demande de connexion.</summary>
      <returns>Tâche qui représente l'opération visant à demander une connexion.</returns>
      <param name="connection">Connexion.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>Envoie une réponse Web socket.</summary>
      <returns>Tâche qui représente l'opération visant à envoyer une réponse.</returns>
      <param name="response">Message à envoyer.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.Send(System.Object)">
      <summary>Envoie une valeur de transport.</summary>
      <returns>Tâche qui représente l'opération visant à envoyer une valeur de transport.</returns>
      <param name="value">Valeur à envoyer.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler">
      <summary>Représente une instance qui gère les les WebSockets SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.#ctor(System.Nullable{System.Int32})"></member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.Close">
      <summary>Ferme cette instance.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.Error">
      <summary>Obtient ou définit l'erreur pendant la gestion du WebSocket.</summary>
      <returns>L'erreur pendant la gestion du WebSocket.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.MaxIncomingMessageSize">
      <summary>Obtient la taille maximale du message entrant.</summary>
      <returns>La taille maximale du message entrant.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnClose(System.Boolean)">
      <summary>Se produit quand cette instance est fermée.</summary>
      <param name="clean">true pour nettoyer le suivi.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnError">
      <summary>Déclenche un événement quand une erreur se produit au cours de l'opération du gestionnaire.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnMessage(System.Byte[])">
      <summary>Déclenche un événement quand un message est reçu.</summary>
      <param name="message">Message.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnMessage(System.String)">
      <summary>Déclenche un événement quand un message est reçu.</summary>
      <param name="message">Message.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnOpen">
      <summary>Déclenche un événement quand cette instance est ouverte.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.ProcessWebSocketRequestAsync(System.Net.WebSockets.WebSocket,System.Threading.CancellationToken)">
      <summary>Traite de manière asynchrone la demande reçue par le gestionnaire.</summary>
      <returns>Résultat de l'opération.</returns>
      <param name="webSocket">Le WebSocket.</param>
      <param name="disconnectToken">Le jeton de déconnexion.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.Send(System.String)">
      <summary>Envoie un message associé au gestionnaire.</summary>
      <returns>Le message envoyé.</returns>
      <param name="message">Le message à envoyer.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.WebSocket">
      <summary>Obtient ou définit le WebSocket.</summary>
      <returns>Le WebSocket.</returns>
    </member>
    <member name="T:Owin.ObsoleteOwinExtensions"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapConnection``1(Owin.IAppBuilder,System.String)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapConnection``1(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapConnection(Owin.IAppBuilder,System.String,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapHubs(Owin.IAppBuilder)"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapHubs(Owin.IAppBuilder,Microsoft.AspNet.SignalR.HubConfiguration)"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapHubs(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.HubConfiguration)"></member>
    <member name="T:Owin.OwinExtensions">
      <summary>Représente la connexion aux extensions Owin.</summary>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder)">
      <summary>Mappe les concentrateurs SignalR au pipeline du générateur d'applications au niveau « /signalr ».</summary>
      <returns>Retourne <see cref="T:Owin.IAppBuilder" />.</returns>
      <param name="builder">Générateur d'applications.</param>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder,Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>Mappe les concentrateurs SignalR au pipeline du générateur d'applications au niveau « /signalr ».</summary>
      <returns>Retourne <see cref="T:Owin.IAppBuilder" />.</returns>
      <param name="builder">Générateur d'applications.</param>
      <param name="configuration">
        <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" /> à utiliser </param>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR``1(Owin.IAppBuilder,System.String)">
      <summary>Mappe la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> du SignalR spécifié au pipeline du générateur d'applications au niveau du chemin d'accès spécifié. </summary>
      <returns>Retourne <see cref="T:Owin.IAppBuilder" />.</returns>
      <param name="builder">Générateur d'applications.</param>
      <param name="path">  Chemin d'accès servant à mapper <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /></param>
      <typeparam name="TConnection">Type de la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR``1(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <summary>Mappe la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> du SignalR spécifié au pipeline du générateur d'applications au niveau du chemin d'accès spécifié. </summary>
      <returns>Retourne <see cref="T:Owin.IAppBuilder" />.</returns>
      <param name="builder">Générateur d'applications.</param>
      <param name="path">Chemin d'accès servant à mapper la connexion persistante.</param>
      <param name="configuration">
        <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /> à utiliser </param>
      <typeparam name="TConnection">Type de la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>Mappe les concentrateurs SignalR au pipeline du générateur d'applications au niveau du chemin d'accès spécifié.</summary>
      <returns>Retourne <see cref="T:Owin.IAppBuilder" />.</returns>
      <param name="builder">Générateur d'applications.</param>
      <param name="path">Le chemin d'accès servant à mapper les concentrateurs signalr.</param>
      <param name="configuration">
        <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" /> à utiliser </param>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder,System.String,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <summary>Mappe la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> spécifiée au pipeline du générateur d'applications au niveau du chemin d'accès spécifié. </summary>
      <returns>Retourne <see cref="T:Owin.IAppBuilder" />.</returns>
      <param name="builder">Générateur d'applications.</param>
      <param name="path">Chemin d'accès servant à mapper la connexion persistante.</param>
      <param name="connectionType">Type de la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</param>
      <param name="configuration">
        <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /> à utiliser </param>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR(Owin.IAppBuilder)">
      <summary>Ajoute des concentrateurs SignalR au pipeline du générateur d'applications.</summary>
      <param name="builder">Générateur d'applications.</param>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR``1(Owin.IAppBuilder)">
      <summary>Ajoute la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> du SignalR spécifié au générateur d'applications. </summary>
      <param name="builder">Générateur d'applications</param>
      <typeparam name="TConnection">Type de la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR``1(Owin.IAppBuilder,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <param name="builder">Générateur d'applications.</param>
      <param name="configuration">
        <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /> à utiliser</param>
      <typeparam name="TConnection">Ajoute la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> du SignalR spécifié au générateur d'applications. </typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR(Owin.IAppBuilder,Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>Ajoute des concentrateurs SignalR au pipeline du générateur d'applications.</summary>
      <param name="builder">Générateur d'applications.</param>
      <param name="configuration">
        <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" /> à utiliser </param>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR(Owin.IAppBuilder,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <summary>Ajoute la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> du SignalR spécifié au générateur d'applications. </summary>
      <param name="builder">Générateur d'applications.</param>
      <param name="connectionType">Type de la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</param>
      <param name="configuration">
        <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /> à utiliser </param>
    </member>
    <member name="T:System.Diagnostics.TraceSourceExtensions">
      <summary>Provides extension methods for used by SignalR.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String)">
      <summary>Writes trace error message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="msg">The trace error message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>Writes trace error message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="format">The message format to write to.</param>
      <param name="args">The arguments associated with the <paramref name="format" />.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.String)">
      <summary>Writes trace verbose message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="msg">The trace message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>Writes trace verbose message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="format">The message format to write to.</param>
      <param name="args">The arguments associated with the <paramref name="format" />.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String)">
      <summary>Writes trace warning message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="msg">The trace warning message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>Writes trace warning message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="format">The message format to write to.</param>
      <param name="args">The arguments associated with the <paramref name="format" />.</param>
    </member>
  </members>
</doc>